<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>邱雪雁的blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-05T06:29:58.002Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YukiXueyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo主题推荐</title>
    <link href="http://example.com/2021/05/04/hexo%E4%B8%BB%E9%A2%98%E6%8E%A8%E8%8D%90/"/>
    <id>http://example.com/2021/05/04/hexo%E4%B8%BB%E9%A2%98%E6%8E%A8%E8%8D%90/</id>
    <published>2021-05-04T11:22:49.000Z</published>
    <updated>2021-05-05T06:29:58.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简约型主题"><a href="#简约型主题" class="headerlink" title="简约型主题"></a>简约型主题</h2><h3 id="pure"><a href="#pure" class="headerlink" title="pure"></a>pure</h3><p>pure也就是我现在正在用的主题啦。三栏式布局非常简单，一目了然。可以直观看到文章、分类、标签等。配置也很方便。同时也支持各种插件，让博客具有更多功能。</p><p><a href="https://github.com/cofess/hexo-theme-pure">项目地址</a>   <a href="https://blog.cofess.com/">主题预览</a><br><img src="/.com//blog_pure.png" alt="blog_pure"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简约型主题&quot;&gt;&lt;a href=&quot;#简约型主题&quot; class=&quot;headerlink&quot; title=&quot;简约型主题&quot;&gt;&lt;/a&gt;简约型主题&lt;/h2&gt;&lt;h3 id=&quot;pure&quot;&gt;&lt;a href=&quot;#pure&quot; class=&quot;headerlink&quot; title=&quot;pure&quot;</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="http://example.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>【Android】使用recyclerView+adapter实现滑动布局，并添加点击和长按事件</title>
    <link href="http://example.com/2021/05/04/%E3%80%90Android%E3%80%91%E4%BD%BF%E7%94%A8recyclerView-adapter%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E5%B8%83%E5%B1%80%EF%BC%8C%E5%B9%B6%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E5%92%8C%E9%95%BF%E6%8C%89%E4%BA%8B%E4%BB%B6/"/>
    <id>http://example.com/2021/05/04/%E3%80%90Android%E3%80%91%E4%BD%BF%E7%94%A8recyclerView-adapter%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E5%B8%83%E5%B1%80%EF%BC%8C%E5%B9%B6%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E5%92%8C%E9%95%BF%E6%8C%89%E4%BA%8B%E4%BB%B6/</id>
    <published>2021-05-04T05:08:26.000Z</published>
    <updated>2021-05-05T06:13:11.317Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于《第一行代码（第三版）》，记录一下使用kotlin语言建立recyclerView+adapter的滑动布局，并在adapter中设定监听器，已达到在Activity中使用adapter时自主设定点击和长按事件。</p><h2 id="新建fruit类、fruit的布局"><a href="#新建fruit类、fruit的布局" class="headerlink" title="新建fruit类、fruit的布局"></a>新建fruit类、fruit的布局</h2><ol><li><p>fruit类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>(<span class="keyword">val</span> name:String, <span class="keyword">val</span> bitmap: Bitmap)</span><br></pre></td></tr></table></figure></li><li><p>自定义布局</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;60dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=&quot;@+id/fruitImage&quot;</span><br><span class="line">        android:layout_width=&quot;40dp&quot;</span><br><span class="line">        android:layout_height=&quot;40dp&quot;</span><br><span class="line">        android:layout_gravity=&quot;center_vertical&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;10dp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/fruitName&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_gravity=&quot;center_vertical&quot;</span><br><span class="line">        android:layout_marginLeft=&quot;10dp&quot; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="定义adapter适配器及监听接口"><a href="#定义adapter适配器及监听接口" class="headerlink" title="定义adapter适配器及监听接口"></a>定义adapter适配器及监听接口</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.adaptertest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitAdapter</span></span>(<span class="keyword">val</span> fruitsList: List&lt;Fruit&gt;):</span><br><span class="line">    RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt;()&#123;</span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>(view: View) : RecyclerView.ViewHolder(view)&#123;</span><br><span class="line">        <span class="keyword">val</span> fruitView = view</span><br><span class="line">        <span class="keyword">val</span> fruitImage : ImageView = view.findViewById(R.id.fruitImage)</span><br><span class="line">        <span class="keyword">val</span> fruitName : TextView = view.findViewById(R.id.fruitName)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处设置监听器</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onItemClick</span><span class="params">(view: <span class="type">View</span>?, position: <span class="type">Int</span>)</span></span> <span class="comment">//点击监听</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onItemLongClick</span><span class="params">(view: <span class="type">View</span>?, position: <span class="type">Int</span>)</span></span><span class="comment">//长按监听</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用监听器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> onItemClickListener: OnItemClickListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setOnItemClickListener</span><span class="params">(onItemClickListener: <span class="type">OnItemClickListener</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.onItemClickListener = onItemClickListener</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: ViewHolder &#123;</span><br><span class="line">        <span class="keyword">val</span> view = LayoutInflater.from(parent.context).inflate(R.layout.fruit_item, parent, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">val</span> viewHolder = ViewHolder(view)</span><br><span class="line"><span class="comment">//        viewHolder.fruitImage.setOnClickListener &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ViewHolder(view)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> fruit = fruitsList[position]</span><br><span class="line">        holder.fruitImage.setImageBitmap(fruit.imgBitmap)</span><br><span class="line">        holder.fruitName.text = fruit.name</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置监听器</span></span><br><span class="line">        <span class="keyword">if</span> (onItemClickListener != <span class="literal">null</span>) &#123;</span><br><span class="line">            holder.fruitView.setOnClickListener &#123;</span><br><span class="line">                <span class="keyword">val</span> layoutPos = holder.layoutPosition</span><br><span class="line">                onItemClickListener!!.onItemClick(holder.fruitView, layoutPos)</span><br><span class="line">            &#125;</span><br><span class="line">            holder.fruitView.setOnLongClickListener &#123;</span><br><span class="line">                <span class="keyword">val</span> layoutPos = holder.layoutPosition</span><br><span class="line">                onItemClickListener!!.onItemLongClick(holder.fruitView, layoutPos)</span><br><span class="line">                <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span> = fruitsList.size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Activity里使用recyclerView"><a href="#在Activity里使用recyclerView" class="headerlink" title="在Activity里使用recyclerView"></a>在Activity里使用recyclerView</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> fruitList = ArrayList&lt;Fruit&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        initFruits() <span class="comment">// 初始化水果数据</span></span><br><span class="line">        <span class="keyword">val</span> layoutManager = LinearLayoutManager(<span class="keyword">this</span>)</span><br><span class="line">        recyclerView.layoutManager = layoutManager</span><br><span class="line">        <span class="keyword">val</span> adapter = FruitAdapter(fruitList)</span><br><span class="line">        recyclerView.adapter = adapter</span><br><span class="line"></span><br><span class="line">        adapter.setOnItemClickListener(<span class="keyword">object</span> : FruitAdapter.OnItemClickListener&#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemClick</span><span class="params">(view: <span class="type">View</span>?, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">                <span class="comment">//定义点击事件</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>,<span class="string">&quot;点击事件&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemLongClick</span><span class="params">(view: <span class="type">View</span>?, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">                <span class="comment">//定义长按事件</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>,<span class="string">&quot;长按事件&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">                <span class="comment">//删除示例</span></span><br><span class="line">                fruitList.removeAt(position)</span><br><span class="line">                adapter.notifyDataSetChanged()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initFruits</span><span class="params">()</span></span> &#123;</span><br><span class="line">        repeat(<span class="number">2</span>) &#123;</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Apple&quot;</span>, R.drawable.apple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Banana&quot;</span>, R.drawable.banana_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Orange&quot;</span>, R.drawable.orange_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.watermelon_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pear&quot;</span>, R.drawable.pear_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Grape&quot;</span>, R.drawable.grape_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.pineapple_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.strawberry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Cherry&quot;</span>, R.drawable.cherry_pic))</span><br><span class="line">            fruitList.add(Fruit(<span class="string">&quot;Mango&quot;</span>, R.drawable.mango_pic))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="改变recyclerView的布局为横向排布或网格排布"><a href="#改变recyclerView的布局为横向排布或网格排布" class="headerlink" title="改变recyclerView的布局为横向排布或网格排布"></a>改变recyclerView的布局为横向排布或网格排布</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文基于《第一行代码（第三版）》，记录一下使用kotlin语言建立recyclerView+adapter的滑动布局，并在adapter中设定监听器，已达到在Activity中使用adapter时自主设定点击和长按事件。&lt;/p&gt;
&lt;h2 id=&quot;新建fruit类、fruit</summary>
      
    
    
    
    <category term="android" scheme="http://example.com/categories/android/"/>
    
    
    <category term="android" scheme="http://example.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>0331面试总结</title>
    <link href="http://example.com/2021/03/31/0331%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/03/31/0331%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-31T09:39:25.000Z</published>
    <updated>2021-03-31T10:13:00.903Z</updated>
    
    <content type="html"><![CDATA[<p>总的来说，面试也是对自己能力的一个检验吧，今天一共有3场面试，强度还是比较大。虽然面试之前比较紧张&gt; &lt;</p><p>下面是一些面试中提到的问题总结：</p><h2 id="美团-65min"><a href="#美团-65min" class="headerlink" title="美团 65min"></a>美团 65min</h2><p>美团的面试有一些手写代码的环节，所以需要掌握代码的实现才不会拉跨。问到的一些问题有：</p><ol><li><p>响应式概述</p></li><li><p>eventloop</p></li><li><p>css的布局有哪些</p></li><li><p>css的浮动取值和position取值等布局方式</p></li><li><p>提到了微信小程序，问了微信小程序的单位rpx</p></li><li><p>两栏布局的实现方式有哪些，说得越多越好</p></li><li><p>面向对象的三大特征</p></li><li><p>接口是什么</p></li><li><p>闭包是什么</p></li><li><p>手写一个函数，传入一个函数和数字num，实现只调用num次这个数字（就是使用闭包来实现）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例：实现wrapper(a,num)：</span></span><br><span class="line"></span><br><span class="line">wrapper(a,<span class="number">2</span>);</span><br><span class="line">wrapper(a,<span class="number">2</span>);</span><br><span class="line">wrapper(a,<span class="number">2</span>);</span><br><span class="line">wrapper(a,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">虽然调用<span class="number">4</span>次wrapper(),最终只调用a() <span class="number">2</span>次</span><br><span class="line">解答：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapper</span>(<span class="params">fn,num</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="title">funtion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(count&gt;num)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fn();</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还写了一个URL截取</p></li><li><p>问到了使用vue和原生js的区别</p></li><li><p>最后就是部门介绍和反问环节啦</p></li></ol><h2 id="腾讯40min"><a href="#腾讯40min" class="headerlink" title="腾讯40min"></a>腾讯40min</h2><ol><li>自我介绍和项目介绍</li><li>了解断点续传吗</li><li>vue的生命周期</li><li>vue的响应式的实现原理</li><li>js的变量提升</li><li>js的作用域有哪些，具体解释一下</li><li>解释一下闭包</li><li>this的四种绑定</li><li>new和硬绑定的优先级</li><li>HTTP和HTTPS有了解吗</li><li>SSL的实现方式，是对称加密还是非对称加密？</li><li>css的盒模型</li><li>CSS的选择器有哪些，以及选择器的优先级</li><li>跨域有了解吗</li><li>反问环节~</li></ol><h2 id="阿里40min"><a href="#阿里40min" class="headerlink" title="阿里40min"></a>阿里40min</h2><p>阿里的话已经是技术主管面了，所以没有问到经典的基础题目，基本上都是围绕着项目来问的。问了项目的实现、项目的难点和解决方法。因为我的项目用到了vue，提到了单页面，所以面试官有问到单页面和多页面之间的不同以及基本的实现原理、单页面的优势等。还有vue的响应式实现原理之类。我当时想到的是重绘与排。多页面的话，在进行页面跳转时就需要获取不同的HTML文件，在页面上进行渲染。而单页面的话就是一个HTML，加上各种vue组件。要进行不同功能的改变的话就只需要加载组件即可，不需要重新渲染一整个界面。</p><p>还有问到前后端分离的方法以及域名加载这些。单页面和多页面的域名会有什么样的不同。</p><p>别的还有一些开放题，比如说学习前端的方法，怎么分配时间，有没有读研的打算等等。问到了有没有去看GitHub和别人的博客去学习，学到了什么东西，在项目上怎么使用之类…这个应该还是需要前期做好一些准备才不会在面试时给自己挖坑。</p><p>最后还有问到对要面试的部门以及部门主要业务的一些了解。我有回答阿里云的服务器以及开放的api这些。hr问了我，作为一个用户的角度去评价一下阿里云的服务.。这个当时还是有点懵……</p><p>许愿offer！</p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>面试还是基础和项目两手都要准备。说出的每一句话都可能被问到，所以发言前一定要斟酌好！以及…基础要特别熟悉起来！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总的来说，面试也是对自己能力的一个检验吧，今天一共有3场面试，强度还是比较大。虽然面试之前比较紧张&amp;gt; &amp;lt;&lt;/p&gt;
&lt;p&gt;下面是一些面试中提到的问题总结：&lt;/p&gt;
&lt;h2 id=&quot;美团-65min&quot;&gt;&lt;a href=&quot;#美团-65min&quot; class=&quot;heade</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>图解HTTP</title>
    <link href="http://example.com/2021/03/21/%E5%9B%BE%E8%A7%A3HTTP/"/>
    <id>http://example.com/2021/03/21/%E5%9B%BE%E8%A7%A3HTTP/</id>
    <published>2021-03-21T13:47:19.000Z</published>
    <updated>2021-03-21T14:05:16.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-了解web及网络基础"><a href="#1-了解web及网络基础" class="headerlink" title="1 了解web及网络基础"></a>1 了解web及网络基础</h2><p>1.3</p><p>通常使用的网络是在TCP/IP协议族的基础上运作的，HTTP是内部的一个子集。</p><p>TCP/IP协议族分4个层次：应用层、传输层、网络层、链路层。</p><ul><li>应用层：决定向用户提供应用服务通信时的活动。<ul><li>FTP（文件传输协议）、DNS（域名解析服务）、HTTP协议</li></ul></li><li>传输层：提供两台计算机的数据传输<ul><li>TCP、UDP</li></ul></li><li>网络层：处理网络上流动的数据包</li><li>链路层：处理硬件部分。</li></ul><p>发送端从应用层往下走，接收端从应用层往上走。发送端每次通过一层就增加首部、接收端通过一层就删除首部。</p><p>IP：位于网络层，作用是把各种数据包传送给对方。指明了MAC地址。  解析MAC地址用到ARP协议。</p><p>TCP：提供可靠的字节流服务。将大块的报文切割为报文段。</p><ul><li>确认数据是否到达的标志：SYN、ACK</li><li>三次握手：</li><li>四次挥手</li></ul><p>DNS：负责解析域名。提供域名到IP地址之间的解析服务。</p><h2 id="2-简单的HTTP协议"><a href="#2-简单的HTTP协议" class="headerlink" title="2  简单的HTTP协议"></a>2  简单的HTTP协议</h2><h2 id="3-HTTP报文内部的HTTP信息"><a href="#3-HTTP报文内部的HTTP信息" class="headerlink" title="3 HTTP报文内部的HTTP信息"></a>3 HTTP报文内部的HTTP信息</h2><h2 id="4-返回结果状态的HTTP状态码"><a href="#4-返回结果状态的HTTP状态码" class="headerlink" title="4 返回结果状态的HTTP状态码"></a>4 返回结果状态的HTTP状态码</h2><h2 id="5-与HTTP协作的web服务器"><a href="#5-与HTTP协作的web服务器" class="headerlink" title="5 与HTTP协作的web服务器"></a>5 与HTTP协作的web服务器</h2><h2 id="6-HTTP首部"><a href="#6-HTTP首部" class="headerlink" title="6 HTTP首部"></a>6 HTTP首部</h2><h2 id="7-确保web安全的HTTPS"><a href="#7-确保web安全的HTTPS" class="headerlink" title="7 确保web安全的HTTPS"></a>7 确保web安全的HTTPS</h2><h2 id="8-确认访问用户身份的认证"><a href="#8-确认访问用户身份的认证" class="headerlink" title="8 确认访问用户身份的认证"></a>8 确认访问用户身份的认证</h2><h2 id="9-基于HTTP的功能追加协议"><a href="#9-基于HTTP的功能追加协议" class="headerlink" title="9 基于HTTP的功能追加协议"></a>9 基于HTTP的功能追加协议</h2><h2 id="10-构建web内容的技术"><a href="#10-构建web内容的技术" class="headerlink" title="10 构建web内容的技术"></a>10 构建web内容的技术</h2><h2 id="11-web的攻击技术"><a href="#11-web的攻击技术" class="headerlink" title="11 web的攻击技术"></a>11 web的攻击技术</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-了解web及网络基础&quot;&gt;&lt;a href=&quot;#1-了解web及网络基础&quot; class=&quot;headerlink&quot; title=&quot;1 了解web及网络基础&quot;&gt;&lt;/a&gt;1 了解web及网络基础&lt;/h2&gt;&lt;p&gt;1.3&lt;/p&gt;
&lt;p&gt;通常使用的网络是在TCP/IP协议族的</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记</title>
    <link href="http://example.com/2021/03/15/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/03/15/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-15T12:58:45.000Z</published>
    <updated>2021-03-16T08:28:15.286Z</updated>
    
    <content type="html"><![CDATA[<p>今天看的是这个<a href="http://caibaojian.com/es6/">ES6入门文档</a>,很详细地讲解了ES6.未来再看<a href="https://www.bookstack.cn/read/es6-3rd/sidebar.md">阮一峰的ECMAScript教程</a>作为补充吧<br>ECMAScript是JavaScript的规格，JavaScript是ECMAscript的实现。</p><p><strong>部署</strong>：</p><p>使用node.js</p><p><strong>Babel转码器</strong>： 广泛使用的ES6转码器，可将ES6转化为ES5，从而在现有环境中进行。</p><p>Babel配置文件是<code>.babelrc</code>，用于设置转码规则和插件</p><p>命令行转码工具：<code>babel-cli</code></p><p><code>babel-node</code>直接运行ES6代码</p><p>Traceur转码器，也可以将ES6转为ES5</p><h2 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h2><p>let所声明的变量只在所在的代码块内有效。适合在for循环内使用，避免值覆盖的情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>];<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>];<span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>let 不存在变量提升，因此一定要先声明变量才能使用。var存在变量提升。</p><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>一旦区块中存在let和const变量，就一定要先声明再使用。凡是在声明之前使用这些变量，就会报错。哪怕已经有一个var声明的全局变量。</p><p>用let声明的变量，在声明之前都是该变量的死区，用到就会报错。</p><p>暂时性死区的本质：已进入当前作用域，要使用的 变量就已经存在，但是不可获取。只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><p>let不允许在同一作用域内重复声明变量。</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>外层代码块不受内层代码块的影响。</p><p>外层作用域无法读取内层作用域的变量。</p><p>内层作用域可以定义外层作用域的同名变量。</p><p>ES5中函数只能在顶层作用域和函数作用域中声明，不能在块级作用域声明。ES6允许在块级作用域中声明函数。</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>声明的变量不能改变值，const一旦声明变量，就必须立刻初始化，不能留到最后赋值。</p><p>const声明的变量只在块级作用域中有效。同样存在暂时性死区</p><p>对于复合类型，const指向的是数据所在的地址，只是保证该地址不变，数据可以改变。<code>Object.freeze</code>可以将对象冻结。</p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p><code>var [a,b,c] = [1,2,3]</code>——属于模式匹配的写法。</p><p>可以从数组中提取值，按照对应位置，对变量赋值。</p><p>只要两边的模式相同，左边的变量就会赋予对应的值。</p><p>不想要的值可以用<code>,</code>隔开，如<code>var [, , third] = [1,2,3];third//3</code></p><p>把多余的变量赋值成为数组：<code>let [a,..b] = [1,2,3,4];a//1;b//[2,3,4]</code>注意：<code>...</code>只能用在最末尾，不能用在中间。</p><p>解构不成功：变量等于undefined</p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>在左端定义默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [foo=<span class="literal">true</span>] = []</span><br><span class="line">foo<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">[x,y=<span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">x<span class="comment">//a</span></span><br><span class="line">y<span class="comment">//b</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>变量必须与属性同名才能取到正确的值。</p><p>先找到同名属性，再赋值给变量</p><p>模式不会被赋值</p><p>对象的解构也可以使用默认值</p><h3 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h3><p><code>const [a,b,c,d,e] = &#39;hello&#39;</code> </p><p>还可以对length解构赋值<code>let &#123;length :len&#125; = &#39;hello&#39;;len//5</code></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>右边的值不是对象的话，则先转为对象。</p><h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><p>建议只要有可能，就不要在模式中放置圆括号。</p><h3 id="不能使用圆括号："><a href="#不能使用圆括号：" class="headerlink" title="不能使用圆括号："></a>不能使用圆括号：</h3><ol><li>变量声明中不能使用圆括号</li><li>函数参数中不能使用圆括号</li><li>赋值语句中不能将整个模式或嵌套模式中的一层放入圆括号</li></ol><h3 id="可以使用圆括号——赋值语句中的非模式部分"><a href="#可以使用圆括号——赋值语句中的非模式部分" class="headerlink" title="可以使用圆括号——赋值语句中的非模式部分"></a>可以使用圆括号——赋值语句中的非模式部分</h3><h3 id="解构变量的用途"><a href="#解构变量的用途" class="headerlink" title="解构变量的用途"></a>解构变量的用途</h3><ol><li><p>交换变量的值 <code>[x,y] = [y,x]</code></p></li><li><p>从函数返回多个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure></li><li><p>函数参数的定义</p></li><li><p>提取JSON的数据</p></li><li><p>函数参数的默认值</p></li><li><p>遍历map结构</p></li><li><p>输入模块的指定方法</p></li></ol><h2 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h2><p>加强对Unicode的支持：只要将码点放入{}。就能正确解读Unicode</p><p>codePointAt() 返回一个字符的码点（十进制）</p><p>string.fromCodePoint() 从码点返回字符</p><h3 id="遍历器接口"><a href="#遍历器接口" class="headerlink" title="遍历器接口"></a>遍历器接口</h3><p>使字符串可以被<code>for...of</code>循环遍历</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>at()返回字符串的字节   <code>‘hello‘.at(0)  //h</code></p><p>repeat（）返回一个将源字符串重复n次的新字符串<code>&#39;hello&#39;.repeat(n)</code>,参数不能是负数和Infinity。参数是0到1之间的小数：等同于0。NaN等同于0。参数是字符串：则先转为数字。</p><p>补全长度：</p><p>padStart(),padEnd().长度之和若超过指定的最小长度：截去超出位数的补全字符串。省略第二个参数：用空格代替。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;abax&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xaba&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>用反引号标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><p>所有的空格和缩进都会被保留在输出之中。</p><p>模板字符串中嵌入变量，需要将变量名写在<code>$&#123;&#125;</code>之中。</p><h2 id="正则的扩展"><a href="#正则的扩展" class="headerlink" title="正则的扩展"></a>正则的扩展</h2><p>如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/ig</span>, <span class="string">&#x27;i&#x27;</span>).flags</span><br><span class="line"><span class="comment">// &quot;i&quot;</span></span><br></pre></td></tr></table></figure><h3 id="正则方法"><a href="#正则方法" class="headerlink" title="正则方法"></a>正则方法</h3><p><code>match()</code>,<code>replace()</code>,<code>search()</code>,<code>split()</code></p><h3 id="u修饰符"><a href="#u修饰符" class="headerlink" title="u修饰符"></a>u修饰符</h3><ol><li><p>点字符</p><p>对于码点大于<code>0xFFFF</code>的Unicode字符，点字符不能识别，必须加上<code>u</code>修饰符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;𠮷&#x27;</span>;</span><br><span class="line"></span><br><span class="line">/^.$/.test(s) <span class="comment">// false</span></span><br><span class="line">/^.$/u.test(s) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码表示，如果不添加<code>u</code>修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。</p></li><li><p>ES6新增了使用大括号表示Unicode字符，这种表示法在正则表达式中必须加上<code>u</code>修饰符，才能识别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/\u&#123;<span class="number">61</span>&#125;/.test(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">/\u&#123;<span class="number">61</span>&#125;/u.test(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">/\u&#123;20BB7&#125;/u.test(<span class="string">&#x27;𠮷&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码表示，如果不加<code>u</code>修饰符，正则表达式无法识别<code>\u&#123;61&#125;</code>这种表示法，只会认为这匹配61个连续的<code>u</code>。</p></li><li><p>使用<code>u</code>修饰符后，所有量词都会正确识别码点大于<code>0xFFFF</code>的Unicode字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/a&#123;<span class="number">2</span>&#125;/.test(<span class="string">&#x27;aa&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">/a&#123;<span class="number">2</span>&#125;/u.test(<span class="string">&#x27;aa&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">/𠮷&#123;<span class="number">2</span>&#125;/.test(<span class="string">&#x27;𠮷𠮷&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">/𠮷&#123;<span class="number">2</span>&#125;/u.test(<span class="string">&#x27;𠮷𠮷&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>另外，只有在使用<code>u</code>修饰符的情况下，Unicode表达式当中的大括号才会被正确解读，否则会被解读为量词。</p></li><li><p><code>u</code>修饰符也影响到预定义模式，能否正确识别码点大于<code>0xFFFF</code>的Unicode字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^\S$/.test(<span class="string">&#x27;𠮷&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">/^\S$/u.test(<span class="string">&#x27;𠮷&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码的<code>\S</code>是预定义模式，匹配所有不是空格的字符。只有加了<code>u</code>修饰符，它才能正确匹配码点大于<code>0xFFFF</code>的Unicode字符。</p></li></ol><h3 id="y修饰符"><a href="#y修饰符" class="headerlink" title="y修饰符"></a>y修饰符</h3><p><code>y</code>修饰符，叫做“粘连”（sticky）修饰符。</p><p><code>y</code>修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>sticky属性：是否设置了y修饰符</p><p>flags属性：返回正则表达式的修饰符</p><h2 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h2><p>二进制：0b(0B)</p><p>八进制：0o(0O)</p><p>转为十进制：使用Number()</p><p><code>Number.isFinite()</code>用来检查一个数值是否为有限的（finite）。</p><p><code>Number.isNaN()</code>用来检查一个值是否为<code>NaN</code>。</p><p><code>Number.parseInt(&#39;12.34&#39;) // 12</code></p><p><code>Number.parseFloat(&#39;123.45#&#39;) // 123.45</code></p><p><code>Number.isInteger()</code>用来判断一个值是否为整数。需要注意的是，在JavaScript内部，整数和浮点数是同样的储存方法，所以3和3.0被视为同一个值。</p><p><code>Number.EPSILON</code>设置误差范围</p><p><code>Number.isSafeInteger()</code>则是用来判断一个整数是否落在整数范围之内（整数范围在<code>-2^53</code>到<code>2^53</code>之间）。</p><h3 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h3><p>Math.trunc() 去除小数部分，返回整数部分。对于非数值，则先转为数值。对于空值和无法截去小数的值：返回NaN。</p><p>Math.sign() 判断一个数是正数、负数还是零。</p><p>正数返回+1</p><p>负数返回-1</p><p>参数为0，返回0</p><p>参数为-0，返回-0</p><p>其他值：返回NaN</p><p>Math.cbrt()计算一个数的立方根。对于非数值，则先转为数值。</p><p>Math.clz32() 返回一个数的32位无符号整数形式有多少个前导0。对于小数，只考虑整数部分。</p><p>Math.imul() 返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。</p><p>Math.fround方法返回一个数的单精度浮点数形式。</p><p><code>Math.hypot</code>方法返回所有参数的平方和的平方根。</p><p><code>Math.expm1(x)</code>返回ex - 1，即<code>Math.exp(x) - 1</code>。</p><p><code>Math.log1p(x)</code>方法返回<code>1 + x</code>的自然对数，即<code>Math.log(1 + x)</code>。如果<code>x</code>小于-1，返回<code>NaN</code>。</p><p><code>Math.log10(x)</code>返回以10为底的<code>x</code>的对数。如果<code>x</code>小于0，则返回NaN。</p><p><code>Math.log2(x)</code>返回以2为底的<code>x</code>的对数。如果<code>x</code>小于0，则返回NaN。</p><p>三角函数方法。</p><ul><li><code>Math.sinh(x)</code> 返回<code>x</code>的双曲正弦（hyperbolic sine）</li><li><code>Math.cosh(x)</code> 返回<code>x</code>的双曲余弦（hyperbolic cosine）</li><li><code>Math.tanh(x)</code> 返回<code>x</code>的双曲正切（hyperbolic tangent）</li><li><code>Math.asinh(x)</code> 返回<code>x</code>的反双曲正弦（inverse hyperbolic sine）</li><li><code>Math.acosh(x)</code> 返回<code>x</code>的反双曲余弦（inverse hyperbolic cosine）</li><li><code>Math.atanh(x)</code> 返回<code>x</code>的反双曲正切（inverse hyperbolic tangent）</li></ul><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><ol><li><p><code>Array.from</code>方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。</p></li><li><p><code>Array.of</code>方法用于将一组值，转换为数组。</p></li><li><p>数组实例的<code>copyWithin</code>方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.copyWithin(target, start = <span class="number">0</span>, end = <span class="built_in">this</span>.length)</span><br></pre></td></tr></table></figure><ol start="4"><li>数组实例的<code>find</code>方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, -<span class="number">5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br></pre></td></tr></table></figure><p>上面代码找出数组中第一个小于0的成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>find</code>方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。</p><ol start="5"><li><p>数组实例的<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code>。</p></li><li><p><code>fill</code>方法使用给定值，填充一个数组。数组中已有的元素，会被全部抹去。</p></li><li><p><code>entries()</code>，<code>keys()</code>和<code>values()</code>——用于遍历数组。它们都返回一个遍历器对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值</p></li></ol><h3 id="空位"><a href="#空位" class="headerlink" title="空位"></a>空位</h3><ol><li>空位  <code>Array(3) // [, , ,]</code>ES6则是明确将空位转为<code>undefined</code>。</li><li><code>Array.from</code>方法会将数组的空位，转为<code>undefined</code>，也就是说，这个方法不会忽略空位。</li><li>扩展运算符（<code>...</code>）也会将空位转为<code>undefined</code>。</li><li><code>copyWithin()</code>会连空位一起拷贝。</li><li><code>fill()</code>会将空位视为正常的数组位置。</li><li><code>for...of</code>循环也会遍历空位。</li><li><code>entries()</code>、<code>keys()</code>、<code>values()</code>、<code>find()</code>和<code>findIndex()</code>会将空位处理成<code>undefined</code>。</li><li>由于空位的处理规则非常不统一，所以建议避免出现空位。</li></ol><h2 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h2><p>允许为函数的参数设定默认值，即直接写在函数参数的后面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// Hello World</span></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;China&#x27;</span>) <span class="comment">// Hello China</span></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><p>参数变量是默认声明的，所以不能用<code>let</code>或<code>const</code>再次声明。</p><p>参数默认值可以与解构赋值的默认值，结合起来使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;) <span class="comment">// undefined, 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1, 5</span></span><br><span class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1, 2</span></span><br><span class="line">foo() <span class="comment">// TypeError: Cannot read property &#x27;x&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>rest参数（…val）：获取函数的多余参数.使用rest参数，可以向函数传入任意数目的参数。</p><h3 id="扩展运算符（…）"><a href="#扩展运算符（…）" class="headerlink" title="扩展运算符（…）"></a>扩展运算符（…）</h3><p>将一个数组转为用逗号分隔的参数序列</p><p>取代apply方法：</p><p><code>Math.max(...[14,3,7])</code>  等同于<code>Math.max(14,3,7)</code></p><p>通过push函数，将数组添加到另一个数组的尾部。</p><p>扩展运算符的应用：</p><ol><li>合并数组 <code>[...arr1, ...arr2, ...arr3]</code></li><li>与解构赋值结合<code>[a, ...rest] = list</code></li><li>函数的多个返回值</li><li>将字符串转为真正的数组 <code>[...&#39;hello&#39;]</code></li><li>实现Iterator接口对象.任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。</li><li>Map和Set结构，Generator函数</li></ol><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br></pre></td></tr></table></figure><p>上面的箭头函数等同于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function">() =&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用<code>return</code>语句返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125;</span><br></pre></td></tr></table></figure><p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><p>箭头函数与变量解构结合使用。</p><p>简化回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure><p>数组排序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line"><span class="keyword">var</span> result = values.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="keyword">var</span> result = values.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>（2）不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</p><p>（3）不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</p><p>（4）不可以使用<code>yield</code>命令，因此箭头函数不能用作Generator函数。</p><h3 id="箭头函数绑定this"><a href="#箭头函数绑定this" class="headerlink" title="箭头函数绑定this"></a>箭头函数绑定this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">foo::bar;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">bar.bind(foo);</span><br><span class="line"></span><br><span class="line">foo::bar(...arguments);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">bar.apply(foo, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasOwn</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj::hasOwnProperty(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h3><p>概念：某个函数的最后一步是调用另一个函数。</p><p>不一定出现在函数尾部，只要最后一步操作是调用即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> m(x)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化：</p><p>函数调用会形成调用记录——调用帧。所有的调用帧形成一个调用栈。</p><p>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</p><p>“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。</p><p>注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</p><h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><p>尾调用自身，就成为尾递归</p><p>尾递归优化过的fibonacci 递归算法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci2</span> (<span class="params">n , ac1 = <span class="number">1</span> , ac2 = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( n &lt;= <span class="number">1</span> ) &#123;<span class="keyword">return</span> ac2&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Fibonacci2 (n - <span class="number">1</span>, ac2, ac1 + ac2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fibonacci2(<span class="number">100</span>) <span class="comment">// 573147844013817200000</span></span><br><span class="line">Fibonacci2(<span class="number">1000</span>) <span class="comment">// 7.0330367711422765e+208</span></span><br><span class="line">Fibonacci2(<span class="number">10000</span>) <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure><p>由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6也是如此，第一次明确规定，所有ECMAScript的实现，都必须部署“尾调用优化”。这就是说，在ES6中，只要使用尾递归，就不会发生栈溢出，相对节省内存。</p><p>函数式编程有一个概念，叫做柯里化（currying），意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.call(<span class="built_in">this</span>, m, n);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tailFactorial</span>(<span class="params">n, total</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> tailFactorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factorial = currying(tailFactorial, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>上面代码通过柯里化，将尾递归函数 tailFactorial 变为只接受1个参数的 factorial 。</p><p>蹦床函数（trampoline）可以将递归执行转为循环执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (f &amp;&amp; f <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">    f = f();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将原来的递归函数，改写为每一步返回另一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum.bind(<span class="literal">null</span>, x + <span class="number">1</span>, y - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>sum</code>函数的每次执行，都会返回自身的另一个版本。</p><p>现在，使用蹦床函数执行<code>sum</code>，就不会发生调用栈溢出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trampoline(sum(<span class="number">1</span>, <span class="number">100000</span>))</span><br><span class="line"><span class="comment">// 100001</span></span><br></pre></td></tr></table></figure><h2 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h2><p>允许直接写入变量和函数，作为对象的属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> baz = &#123;foo&#125;;</span><br><span class="line">baz <span class="comment">// &#123;foo: &quot;bar&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> baz = &#123;<span class="attr">foo</span>: foo&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> birth = <span class="string">&#x27;2000/01/01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line"></span><br><span class="line">  name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//等同于birth: birth</span></span><br><span class="line">  birth,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 等同于hello: function ()...</span></span><br><span class="line">  <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;我的名字是&#x27;</span>, <span class="built_in">this</span>.name); &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>属性的赋值器（setter）和取值器（getter），事实上也是采用这种写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cart = &#123;</span><br><span class="line">  _wheels: <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">  get wheels () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._wheels;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set wheels (value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="built_in">this</span>._wheels) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;数值太小了！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>._wheels = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果某个方法的值是一个Generator函数，前面需要加上星号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  * <span class="function"><span class="title">m</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>Object.is() 比较两个值是否严格相等</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p><code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象</p><p>实行的是浅拷贝，而不是深拷贝。</p><p>常见用途：</p><ol><li>为对象添加属性</li><li>为对象添加方法</li><li>克隆对象</li><li>合并多个对象</li><li>为属性指定默认值</li></ol></li></ul><p>ES6一共有5种方法可以<strong>遍历对象的属性</strong>。</p><p><strong>（1）for…in</strong></p><p><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。</p><p><strong>（2）Object.keys(obj)</strong></p><p><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。</p><p><strong>（3）Object.getOwnPropertyNames(obj)</strong></p><p><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。</p><p><strong>（4）Object.getOwnPropertySymbols(obj)</strong></p><p><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有Symbol属性。</p><p><strong>（5）Reflect.ownKeys(obj)</strong></p><p><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。</p><p>以上的5种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。</p><ul><li>首先遍历所有属性名为数值的属性，按照数字排序。</li><li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li><li>最后遍历所有属性名为Symbol值的属性，按照生成时间排序。</li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ol><li><p><code>__proto__</code>属性，Object.setPrototypeOf()，Object.getPrototypeOf()</p></li><li><p><code>__proto__</code>属性（前后各两个下划线），用来读取或设置当前对象的<code>prototype</code>对象。</p></li><li><p><code>Object.setPrototypeOf</code>方法的作用与<code>__proto__</code>相同，用来设置一个对象的<code>prototype</code>对象。它是ES6正式推荐的设置原型对象的方法。</p></li><li><p><code>Object.getPrototypeOf</code>与setPrototypeOf方法配套，用于读取一个对象的prototype对象。</p></li></ol><ol><li><code>Object.keys</code>方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</li><li><code>Object.values</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</li><li><code>Object.create</code>方法的第二个参数添加的对象属性（属性<code>p</code>），如果不显式声明，默认是不可遍历的。<code>Object.values</code>不会返回这个属性。</li><li><code>Object.entries</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。</li><li><code>Object.getOwnPropertyDescriptors</code>方法返回一个对象，所有原对象的属性名都是该对象的属性名，对应的属性值就是该属性的描述对象。</li></ol><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>symbol 表示独一无二的值。</p><p><code>let s = Symbol()</code></p><p><code>Symbol()</code>函数前不能使用new。因为生成的Symbol是一个原始类型的值，不是对象。因此Symbol值也不能添加属性。</p><p>Symbol不能与其他类型的值进行运算，会报错。但是可以显式转为字符串。也可以转换为布尔值，但是不能转化为数值。</p><p>由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p><p>Symbol值作为对象属性名时，不能用点运算符。</p><p>Symbol还可以用于定义一组常量，保证这组常量的值都是不相等的。</p><p>常用的消除魔术字符串的方法，就是把它写成一个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="string">&#x27;Triangle&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> shapeType.triangle:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(shapeType.triangle, &#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，我们把“Triangle”写成<code>shapeType</code>对象的<code>triangle</code>属性，这样就消除了强耦合。</p><p>改用Symbol值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，除了将<code>shapeType.triangle</code>的值设为一个Symbol，其他地方都不用修改。</p><p>Symbol 作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。但是，它也不是私有属性，有一个<code>Object.getOwnPropertySymbols</code>方法，可以获取指定对象的所有 Symbol 属性名。</p><p><code>Object.getOwnPropertySymbols</code>方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><p><code>Symbol.for</code>方法接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。</p><p><code>Symbol.keyFor</code>方法返回一个已登记的 Symbol 类型值的<code>key</code>。</p><h3 id="内置的Symbol值"><a href="#内置的Symbol值" class="headerlink" title="内置的Symbol值"></a>内置的Symbol值</h3><p>对象的<code>Symbol.hasInstance</code>属性，指向一个内部方法。当其他对象使用<code>instanceof</code>运算符，判断是否为该对象的实例时，会调用这个方法。</p><p>对象的<code>Symbol.isConcatSpreadable</code>属性等于一个布尔值，表示该对象使用<code>Array.prototype.concat()</code>时，是否可以展开。</p><p>对象的<code>Symbol.species</code>属性，指向一个方法。该对象作为构造函数创造实例时，会调用这个方法。即如果<code>this.constructor[Symbol.species]</code>存在，就会使用这个属性作为构造函数，来创造新的实例对象。</p><p>对象的<code>Symbol.match</code>属性，指向一个函数。当执行<code>str.match(myObject)</code>时，如果该属性存在，会调用它，返回该方法的返回值。</p><p>对象的<code>Symbol.replace</code>属性，指向一个方法，当该对象被<code>String.prototype.replace</code>方法调用时，会返回该方法的返回值。</p><p>对象的<code>Symbol.search</code>属性，指向一个方法，当该对象被<code>String.prototype.search</code>方法调用时，会返回该方法的返回值。</p><p>对象的<code>Symbol.split</code>属性，指向一个方法，当该对象被<code>String.prototype.split</code>方法调用时，会返回该方法的返回值。</p><p>对象的<code>Symbol.iterator</code>属性，指向该对象的默认遍历器方法。</p><p>对象的<code>Symbol.toPrimitive</code>属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</p><p>对象的<code>Symbol.toStringTag</code>属性，指向一个方法。在该对象上面调用<code>Object.prototype.toString</code>方法时，如果这个属性存在，它的返回值会出现在<code>toString</code>方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制<code>[object Object]</code>或<code>[object Array]</code>中<code>object</code>后面的那个字符串。</p><p>对象的<code>Symbol.unscopables</code>属性，指向一个对象。该对象指定了使用<code>with</code>关键字时，哪些属性会被<code>with</code>环境排除。</p><h2 id="Set和Map数据结构"><a href="#Set和Map数据结构" class="headerlink" title="Set和Map数据结构"></a>Set和Map数据结构</h2><p>Set：类似于数组，但是每个值都是唯一的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="comment">//初始化：</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>].map(<span class="function"><span class="params">x</span> =&gt;</span>s.add(x));</span><br><span class="line">s<span class="comment">//[2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h3 id="Set的属性"><a href="#Set的属性" class="headerlink" title="Set的属性"></a>Set的属性</h3><ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是<code>Set</code>函数。</li><li><code>Set.prototype.size</code>：返回<code>Set</code>实例的成员总数。</li></ul><p>操作方法：（操作数据）</p><ul><li><code>add(value)</code>：添加某个值，返回Set结构本身。</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li><li><code>clear()</code>：清除所有成员，没有返回值。</li></ul><p><code>Array.from</code>方法可以将Set结构转为数组。</p><p>去除数组重复成员：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedupe</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dedupe([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>遍历方法：</p><ul><li><code>keys()</code>：返回键名的遍历器</li><li><code>values()</code>：返回键值的遍历器</li><li><code>entries()</code>：返回键值对的遍历器</li><li><code>forEach()</code>：使用回调函数遍历每个成员，没有返回值</li></ul><p>需要特别指出的是，<code>Set</code>的遍历顺序就是插入顺序。</p><p>应用：</p><p>扩展运算符和Set结构相结合，就可以去除数组的重复成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="comment">// [3, 5, 2]</span></span><br></pre></td></tr></table></figure><p>实现并集（Union）、交集（Intersect）和差集（Difference）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]);</span><br><span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)));</span><br><span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x)));</span><br><span class="line"><span class="comment">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h3><p>WeakSet的成员只能是对象，而不能是其他类型的值。</p><p>WeakSet中的对象都是<strong>弱引用</strong>，即垃圾回收机制不考虑WeakSet对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于WeakSet之中。这个特点意味着，无法引用WeakSet的成员，因此WeakSet是<strong>不可遍历</strong>的。</p><p>WeakSet结构有以下三个方法。</p><ul><li>**WeakSet.prototype.add(value)**：向WeakSet实例添加一个新成员。</li><li>**WeakSet.prototype.delete(value)**：清除WeakSet实例的指定成员。</li><li>**WeakSet.prototype.has(value)**：返回一个布尔值，表示某个值是否在WeakSet实例之中。</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object结构提供了“字符串—值”的对应，Map结构提供了“值—值”的对应，是一种更完善的Hash结构实现。如果你需要“键值对”的数据结构，Map比Object更合适。</p><h3 id="Map的属性"><a href="#Map的属性" class="headerlink" title="Map的属性"></a>Map的属性</h3><ol><li>size 返回Map结构的成员总数</li><li>set(key,value) <code>set</code>方法设置<code>key</code>所对应的键值，然后返回整个Map结构。如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键。  可以采用链式写法</li><li>get(key)  <code>get</code>方法读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code>。</li><li>has(key)  <code>has</code>方法返回一个布尔值，表示某个键是否在Map数据结构中。</li><li>delete(key)  <code>delete</code>方法删除某个键，返回true。如果删除失败，返回false。</li><li>clear()<code>clear</code>方法清除所有成员，没有返回值。</li></ol><h3 id="Map-的方法"><a href="#Map-的方法" class="headerlink" title="Map 的方法"></a>Map 的方法</h3><p>遍历方法：</p><ul><li><code>keys()</code>：返回键名的遍历器。</li><li><code>values()</code>：返回键值的遍历器。</li><li><code>entries()</code>：返回所有成员的遍历器。</li><li><code>forEach()</code>：遍历Map的所有成员。</li></ul><p><strong>（1）Map转为数组</strong></p><p>前面已经提过，Map转为数组最方便的方法，就是使用扩展运算符（…）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">true</span>, <span class="number">7</span>).set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">&#x27;abc&#x27;</span>]);</span><br><span class="line">[...myMap]</span><br><span class="line"><span class="comment">// [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ &#x27;abc&#x27; ] ] ]</span></span><br></pre></td></tr></table></figure><p><strong>（2）数组转为Map</strong></p><p>将数组转入Map构造函数，就可以转为Map。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="literal">true</span>, <span class="number">7</span>], [&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">&#x27;abc&#x27;</span>]]])</span><br><span class="line"><span class="comment">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; [&#x27;abc&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><p><strong>（3）Map转为对象</strong></p><p>如果所有Map的键都是字符串，它可以转为对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToObj</span>(<span class="params">strMap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [k,v] <span class="keyword">of</span> strMap) &#123;</span><br><span class="line">    obj[k] = v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>).set(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">strMapToObj(myMap)</span><br><span class="line"><span class="comment">// &#123; yes: true, no: false &#125;</span></span><br></pre></td></tr></table></figure><p><strong>（4）对象转为Map</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objToStrMap</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> strMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">    strMap.set(k, obj[k]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> strMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objToStrMap(&#123;<span class="attr">yes</span>: <span class="literal">true</span>, <span class="attr">no</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// [ [ &#x27;yes&#x27;, true ], [ &#x27;no&#x27;, false ] ]</span></span><br></pre></td></tr></table></figure><p><strong>（5）Map转为JSON</strong></p><p>Map转为JSON要区分两种情况。一种情况是，Map的键名都是字符串，这时可以选择转为对象JSON。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToJson</span>(<span class="params">strMap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(strMapToObj(strMap));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>).set(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">strMapToJson(myMap)</span><br><span class="line"><span class="comment">// &#x27;&#123;&quot;yes&quot;:true,&quot;no&quot;:false&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>另一种情况是，Map的键名有非字符串，这时可以选择转为数组JSON。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapToArrayJson</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify([...map]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">true</span>, <span class="number">7</span>).set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">&#x27;abc&#x27;</span>]);</span><br><span class="line">mapToArrayJson(myMap)</span><br><span class="line"><span class="comment">// &#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>（6）JSON转为Map</strong></p><p>JSON转为Map，正常情况下，所有键名都是字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToStrMap</span>(<span class="params">jsonStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> objToStrMap(<span class="built_in">JSON</span>.parse(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonToStrMap(<span class="string">&#x27;&#123;&quot;yes&quot;:true,&quot;no&quot;:false&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;&#x27;yes&#x27; =&gt; true, &#x27;no&#x27; =&gt; false&#125;</span></span><br></pre></td></tr></table></figure><p>但是，有一种特殊情况，整个JSON就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为Map。这往往是数组转为JSON的逆操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToMap</span>(<span class="params">jsonStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">JSON</span>.parse(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonToMap(<span class="string">&#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; [&#x27;abc&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Proxy和Reflect"><a href="#Proxy和Reflect" class="headerlink" title="Proxy和Reflect"></a>Proxy和Reflect</h2><p>Proxy用于修改某些操作的默认行为。属于一种元编程，即对编程语言进行编程。</p><p>Reflect </p><h2 id="Iterator和for…of循环"><a href="#Iterator和for…of循环" class="headerlink" title="Iterator和for…of循环"></a>Iterator和for…of循环</h2><p>Iterator 遍历器，为各种不同的数据结构提供统一的访问机制。</p><p>模拟<code>next</code>方法返回值的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> it = makeIterator([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">it.next() <span class="comment">// &#123; value: &quot;a&quot;, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: &quot;b&quot;, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeIterator</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> nextIndex &lt; array.length ?</span><br><span class="line">        &#123;<span class="attr">value</span>: array[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span>&#125; :</span><br><span class="line">        &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ES6中，有三类数据结构原生具备Iterator接口：数组、某些类似数组的对象、Set和Map结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iter.next() <span class="comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: &#x27;b&#x27;, done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: &#x27;c&#x27;, done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>调用Iterator接口的场合：</p><ol><li>解构赋值</li><li>扩展运算符</li><li>yield*</li><li>关于数组遍历的场合</li></ol><h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><p>for…of 和for…in 的区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line">arr.foo = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">//  &quot;3&quot;, &quot;5&quot;, &quot;7&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h2><p>Generator函数——异步编程解决方案。返回一个遍历器对象。</p><h3 id="yield语句"><a href="#yield语句" class="headerlink" title="yield语句"></a>yield语句</h3><p>yield语句是暂停的标志。</p><p>遍历器对象的<code>next</code>方法的运行逻辑如下。</p><p>（1）遇到<code>yield</code>语句，就暂停执行后面的操作，并将紧跟在<code>yield</code>后面的那个表达式的值，作为返回的对象的<code>value</code>属性值。</p><p>（2）下一次调用<code>next</code>方法时，再继续往下执行，直到遇到下一个<code>yield</code>语句。</p><p>（3）如果没有再遇到新的<code>yield</code>语句，就一直运行到函数结束，直到<code>return</code>语句为止，并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。</p><p>（4）如果该函数没有<code>return</code>语句，则返回的对象的<code>value</code>属性值为<code>undefined</code>。</p><p>需要注意的是，<code>yield</code>语句后面的表达式，只有当调用<code>next</code>方法、内部指针指向该语句时才会执行，因此等于为JavaScript提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。</p><h2 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h2><p>promise是一种异步编程的解决方案。</p><p>promise保存着某个未来才会结束的事件（通常是异步操作）。</p><p>promise是一个对象，可以获得异步操作的信息。</p><p>特点：</p><ol><li>对象的状态不受外界影响。  promise的三种状态：<code>Pending</code>（进行中）、<code>Resolved</code>（已完成，又称Fulfilled）和<code>Rejected</code>（已失败）。状态只有异步操作的结果才能决定。</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>Pending</code>变为<code>Resolved</code>和从<code>Pending</code>变为<code>Rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对<code>Promise</code>对象添加回调函数，也会立即得到这个结果。</li></ol><p>缺点：</p><ol><li>无法取消promise</li><li>如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反应到外部</li><li>当处于<code>Pending</code>状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li></ol><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>promise实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以用<code>then</code>方法分别指定<code>Resolved</code>状态和<code>Reject</code>状态的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise对象的简单例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms, <span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeout(<span class="number">100</span>).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>promise.prototype.then()  为Promise实例添加状态改变时的回调函数</p><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。 </p><p><code>Promise.all</code>方法用于将多个Promise实例，包装成一个新的Promise实例。</p><p><code>Promise.race</code>方法同样是将多个Promise实例，包装成一个新的Promise实例。</p><p><code>Promise.resolve</code>方法将现有对象转为Promise对象</p><p><code>Promise.reject(reason)</code>方法也会返回一个新的Promise实例，该实例的状态为<code>rejected</code>。它的参数用法与<code>Promise.resolve</code>方法完全一致    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天看的是这个&lt;a href=&quot;http://caibaojian.com/es6/&quot;&gt;ES6入门文档&lt;/a&gt;,很详细地讲解了ES6.未来再看&lt;a href=&quot;https://www.bookstack.cn/read/es6-3rd/sidebar.md&quot;&gt;阮一峰的ECM</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Diary" scheme="http://example.com/tags/Diary/"/>
    
    <category term="ES6" scheme="http://example.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>我的前端学习路线</title>
    <link href="http://example.com/2021/03/14/%E6%88%91%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>http://example.com/2021/03/14/%E6%88%91%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</id>
    <published>2021-03-14T01:43:55.000Z</published>
    <updated>2021-03-15T12:57:59.444Z</updated>
    
    <content type="html"><![CDATA[<p>现在还是处于一边准备春招一边复习的阶段，随时补充中……</p><p>JavaScript：<a href="https://zh.javascript.info/">现代JavaScript教程</a>,从头开始过一遍，然后是《JavaScript高级教程》，争取每一部分都看懂，不懂的地方去掘金、微信公众号看别人发的帖子。还有《你不知道的JavaScript》、《JavaScript忍者秘籍》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在还是处于一边准备春招一边复习的阶段，随时补充中……&lt;/p&gt;
&lt;p&gt;JavaScript：&lt;a href=&quot;https://zh.javascript.info/&quot;&gt;现代JavaScript教程&lt;/a&gt;,从头开始过一遍，然后是《JavaScript高级教程》，争取每一部分</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 实用代码</title>
    <link href="http://example.com/2021/03/12/JavaScript%20%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2021/03/12/JavaScript%20%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81/</id>
    <published>2021-03-12T07:45:00.000Z</published>
    <updated>2021-03-15T12:56:44.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-实用代码"><a href="#JavaScript-实用代码" class="headerlink" title="JavaScript 实用代码"></a>JavaScript 实用代码</h1><ul><li><p>删除所有短横线，并将短横线后的每一个单词的首字母变为大写 <code>camelize(&quot;background-color&quot;) == &#39;backgroundColor&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .split(<span class="string">&#x27;-&#x27;</span>) <span class="comment">// splits &#x27;my-long-word&#x27; into array [&#x27;my&#x27;, &#x27;long&#x27;, &#x27;word&#x27;]</span></span><br><span class="line">    .map(</span><br><span class="line">      <span class="comment">// capitalizes first letters of all array items except the first one</span></span><br><span class="line">      <span class="comment">// converts [&#x27;my&#x27;, &#x27;long&#x27;, &#x27;word&#x27;] into [&#x27;my&#x27;, &#x27;Long&#x27;, &#x27;Word&#x27;]</span></span><br><span class="line">      (word, index) =&gt; index == <span class="number">0</span> ? word : word[<span class="number">0</span>].toUpperCase() + word.slice(<span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line">    .join(<span class="string">&#x27;&#x27;</span>); <span class="comment">// joins [&#x27;my&#x27;, &#x27;Long&#x27;, &#x27;Word&#x27;] into &#x27;myLongWord&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缩减版：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.split(<span class="string">&#x27;-&#x27;</span>).map(<span class="function">(<span class="params">word,index</span>)=&gt;</span>index==<span class="number">0</span>?word:word[<span class="number">0</span>].toUpperCase()+word.slice(<span class="number">1</span>)).join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写一个函数 filterRange(arr, a, b)，该函数获取一个数组 arr，在其中查找数值大于或等于 a，且小于或等于 b 的元素，并将结果以数组的形式返回一个新数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterRange</span>(<span class="params">arr, a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在表达式周围添加了括号，以提高可读性</span></span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> (a &lt;= item &amp;&amp; item &lt;= b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取一个数组 arr，并删除其中介于 a 和 b 区间以外的所有值。检查：a ≤ arr[i] ≤ b。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterRangeInPlace</span>(<span class="params">arr, a, b</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> val = arr[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果超出范围，则删除</span></span><br><span class="line">    <span class="keyword">if</span> (val &lt; a || val &gt; b) &#123;</span><br><span class="line">      arr.splice(i, <span class="number">1</span>);</span><br><span class="line">      i--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>/</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-实用代码&quot;&gt;&lt;a href=&quot;#JavaScript-实用代码&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 实用代码&quot;&gt;&lt;/a&gt;JavaScript 实用代码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;删除所有短横线，并</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题记录</title>
    <link href="http://example.com/2021/02/20/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/02/20/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-02-20T04:39:36.000Z</published>
    <updated>2021-02-20T10:24:40.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a>3. 无重复字符的最长子串</h2><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></p><p>思路：</p><p>滑动窗口方法，构造出散列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*构造*/</span></span><br><span class="line">    <span class="keyword">const</span> occ = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">const</span> n = s.length;</span><br><span class="line">    <span class="keyword">let</span> rk = -<span class="number">1</span>,ans = <span class="number">0</span>;<span class="comment">/*右指针*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line">            occ.delete(s.charAt(i-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">while</span> (rk + <span class="number">1</span> &lt; n &amp;&amp; !occ.has(s.charAt(rk + <span class="number">1</span>))) &#123;</span><br><span class="line">             occ.add(s.charAt(rk+<span class="number">1</span>));</span><br><span class="line">             ++rk;</span><br><span class="line">         &#125;</span><br><span class="line">        ans = <span class="built_in">Math</span>.max(ans, rk - i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a>4. 寻找两个正序数组的中位数</h2><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></p><p>思路：</p><ol><li>调用<code>concat()</code>函数将两个数组合并</li><li>将数组排序(不用数组自带的<code>arr.sort()</code>方法是因为该方法无法正确判断当数组有负数的情况，所以需要另外写一个排序函数)</li><li>根据数组长度的奇偶求中位数（注意，当长度n为偶数时，中位数为数组的第n/2位和第n/2-1位，因为数组开头是0）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">nums</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;nums.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">let</span> temp = nums[j+<span class="number">1</span>];</span><br><span class="line">                    nums[j+<span class="number">1</span>] = nums[j];</span><br><span class="line">                    nums[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num3 = nums1.concat(nums2);</span><br><span class="line">    num3 = sort(num3);</span><br><span class="line">    <span class="keyword">var</span> ansNum = num3.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ansNum%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> num3[<span class="built_in">Math</span>.floor(ansNum/<span class="number">2</span>)];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ans = num3[ansNum/<span class="number">2</span>]+num3[ansNum/<span class="number">2</span>-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> ans/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56.合并区间"></a>56.合并区间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        intervals.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        merged = []</span><br><span class="line">        <span class="keyword">for</span> interval <span class="keyword">in</span> intervals:</span><br><span class="line">            <span class="comment"># 如果列表为空，或者当前区间与上一区间不重合，直接添加</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> merged <span class="keyword">or</span> merged[-<span class="number">1</span>][<span class="number">1</span>] &lt; interval[<span class="number">0</span>]:</span><br><span class="line">                merged.append(interval)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 否则的话，我们就可以与上一区间进行合并</span></span><br><span class="line">                merged[-<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(merged[-<span class="number">1</span>][<span class="number">1</span>], interval[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merged</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a>94. 二叉树的中序遍历</h2><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> inorder = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        res.push(root.val);</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h2><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102.二叉树的层序遍历</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ret = [];</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> q = [];</span><br><span class="line">    q.push(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q.length !== <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> currentLevelSize =q.length;</span><br><span class="line">        ret.push([]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;=currentLevelSize;i++)&#123;</span><br><span class="line">            <span class="keyword">const</span> node = q.shift();</span><br><span class="line">            ret[ret.length-<span class="number">1</span>].push(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.left) q.push(node.left);</span><br><span class="line">            <span class="keyword">if</span>(node.right) q.push(node.right);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寻找6174"><a href="#寻找6174" class="headerlink" title="寻找6174"></a>寻找6174</h2><blockquote><p>给定任一个各位数字不完全相同的4位正整数，如果我们先把4个数字按非递增排序，再按非递减排序，然后用第1个数字减第2个数字，将得到<br> 一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的6174，这个神奇的数字也叫Kaprekar常数。</p><p> 例如，我们从6767开始，将得到</p><p> 7766 - 6677 = 1089<br> 9810 - 0189 = 9621<br> 9621 - 1269 = 8352<br> 8532 - 2358 = 6174<br> 7641 - 1467 = 6174<br> … …</p><p> 现给定任意4位正整数，请编写程序演示到达黑洞的过程。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">findNum</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="string">&#x27;-&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> chazhi = num;</span><br><span class="line"></span><br><span class="line">    str = str+chazhi.toString();</span><br><span class="line">    <span class="keyword">while</span>(chazhi!=<span class="number">6174</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = (chazhi+<span class="string">&#x27;&#x27;</span>).split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> small = <span class="built_in">parseInt</span>(temp.sort().join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="keyword">var</span> big = <span class="built_in">parseInt</span>(temp.reverse().join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">        chazhi  = big-small;</span><br><span class="line">        str = str+node+chazhi.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(findNum(<span class="number">2021</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3-无重复字符的最长子串&quot;&gt;&lt;a href=&quot;#3-无重复字符的最长子串&quot; class=&quot;headerlink&quot; title=&quot;3. 无重复字符的最长子串&quot;&gt;&lt;/a&gt;3. 无重复字符的最长子串&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn</summary>
      
    
    
    
    <category term="刷题" scheme="http://example.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>css揭秘读书笔记</title>
    <link href="http://example.com/2021/02/18/css%E6%8F%AD%E7%A7%98/"/>
    <id>http://example.com/2021/02/18/css%E6%8F%AD%E7%A7%98/</id>
    <published>2021-02-18T07:23:00.000Z</published>
    <updated>2021-02-20T11:18:35.874Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/26745943/">CSS揭秘</a></p><h2 id="编码技巧"><a href="#编码技巧" class="headerlink" title="编码技巧"></a>编码技巧</h2><p>用到的工具函数<code>$$()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$$</span>(<span class="params">selector,context</span>)</span>&#123;</span><br><span class="line">    context = context||<span class="built_in">document</span>;</span><br><span class="line">    <span class="keyword">var</span> elements = context.querySelectorAll(selector);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3.org/">w3c官网</a></p><p><a href="https://www.w3.org/TR/css-cascade-3/">层叠与继承</a></p><ul><li>尽量减少代码重复<ul><li>使用em单位，只在一处修改就可以改变所有元素的大小。</li><li>继承 inherit：绑定父元素的值<code>color:inherit</code></li><li>在较大分辨率下得到固定长度时，使用max-width代替width.</li><li>使用多列文本时，指定column-width代替column-count（列数）</li></ul></li></ul><h2 id="背景与边框"><a href="#背景与边框" class="headerlink" title="背景与边框"></a>背景与边框</h2><h3 id="半透明边框"><a href="#半透明边框" class="headerlink" title="半透明边框"></a>半透明边框</h3><p><a href="https://www.w3.org/TR/css-backgrounds-3/">背景与边框</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用内边距的外沿把背景裁切掉        </span><br><span class="line"><span class="attribute">border</span>:<span class="number">10px</span> solid <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,<span class="number">5</span>);       </span><br><span class="line"><span class="attribute">background</span>:red;</span><br><span class="line"><span class="attribute">background-clip</span>: padding-box;</span><br></pre></td></tr></table></figure><h3 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h3><p><code>box-shadow</code>可以不断叠加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:yellowgreen;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#655</span>,</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> deeppink,</span><br><span class="line"><span class="number">0</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>使用outline</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:yellowgreen;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#655</span>;</span><br><span class="line"><span class="attribute">outline</span>:<span class="number">5px</span> solid deeppink;</span><br></pre></td></tr></table></figure><p>(!  outline不会贴合元素的圆角)</p><h3 id="灵活的背景定位"><a href="#灵活的背景定位" class="headerlink" title="灵活的背景定位"></a>灵活的背景定位</h3><p>背景偏移：设定偏移的位置和量</p><p>如下代码：与右边保持20px偏移量，与下边保持20px偏移量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span><span class="selector-pseudo">:right</span> <span class="number">20px</span> <span class="attribute">bottom</span> <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><p>一般情况下，<code>background-position</code>以<code>padding-box</code>为准</p><p>用<code>background-origin:content-box</code>也能实现。</p><p>或者使用calc() : <code>background-position:calc(100%-20px)  calc(100%-20px)</code>  从左上角偏移的角度考虑：有100%-20px的水平偏移量，100%-20px的垂直偏移量</p><h3 id="边框内圆角"><a href="#边框内圆角" class="headerlink" title="边框内圆角"></a>边框内圆角</h3><p>容器外围有一道边框，只在内侧有圆角</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">         yuki</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .a&#123;</span><br><span class="line"><span class="css">        <span class="attribute">background</span>: <span class="number">#655</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>:.<span class="number">8em</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.a</span> &gt; <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>:tan;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: .<span class="number">8em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>:<span class="number">1em</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">    yuki</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .a&#123;</span><br><span class="line"><span class="css">        <span class="attribute">background</span>:tan;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: .<span class="number">8em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>:<span class="number">1em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> .<span class="number">6em</span> <span class="number">#655</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">outline</span>: .<span class="number">6em</span> solid <span class="number">#655</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过勾股定理，计算圆角、阴影和边框的值</p><h3 id="条纹背景"><a href="#条纹背景" class="headerlink" title="条纹背景"></a>条纹背景</h3><h4 id="水平条纹"><a href="#水平条纹" class="headerlink" title="水平条纹"></a>水平条纹</h4><p>线性渐变<code>background:linear-gradient(#fb3,#58a);</code></p><p>没有渐变的实色<code>background:linear-gradient(#fb3 50%,#58a 50%);</code></p><p>重复，则可得到条纹背景</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(<span class="number">#fb3</span> <span class="number">33.3%</span>,<span class="number">#58a</span> <span class="number">0</span>,<span class="number">#58a</span> <span class="number">66.6%</span> ,yellowgreen <span class="number">0</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">45px</span>;</span><br></pre></td></tr></table></figure><h4 id="垂直条纹"><a href="#垂直条纹" class="headerlink" title="垂直条纹"></a>垂直条纹</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(to right,<span class="number">#fb3</span> <span class="number">33.3%</span>,<span class="number">#58a</span> <span class="number">0</span>,<span class="number">#58a</span> <span class="number">66.6%</span> ,yellowgreen <span class="number">0</span>);</span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">30px</span> <span class="number">100%</span> ;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="斜向条纹"><a href="#斜向条纹" class="headerlink" title="斜向条纹"></a>斜向条纹</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:<span class="built_in">repeating-linear-gradient</span>(<span class="number">30deg</span>,<span class="number">#fb3</span>,<span class="number">#fb3</span> <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>,<span class="number">#58a</span> <span class="number">30px</span>);</span><br></pre></td></tr></table></figure><h3 id="复杂的背景图案"><a href="#复杂的背景图案" class="headerlink" title="复杂的背景图案"></a>复杂的背景图案</h3><h4 id="方格纹"><a href="#方格纹" class="headerlink" title="方格纹"></a>方格纹</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:white;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,<span class="built_in">rgba</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>) <span class="number">50%</span>,transparent <span class="number">0</span>),<span class="built_in">linear-gradient</span>(<span class="built_in">rgba</span>(<span class="number">200</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>) <span class="number">50%</span>,transparent <span class="number">0</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br></pre></td></tr></table></figure><h4 id="波点"><a href="#波点" class="headerlink" title="波点"></a>波点</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#655</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: </span><br><span class="line">    <span class="built_in">radial-gradient</span>(tan <span class="number">30%</span>,transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#655</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: </span><br><span class="line">    <span class="built_in">radial-gradient</span>(tan <span class="number">30%</span>,transparent <span class="number">0</span>),</span><br><span class="line">    <span class="built_in">radial-gradient</span>(tan <span class="number">30%</span>,transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;<span class="comment">/*宽高*/</span></span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>,<span class="number">15px</span> <span class="number">15px</span>;  <span class="comment">/*背景偏移必须是宽高的一半*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="棋盘"><a href="#棋盘" class="headerlink" title="棋盘"></a>棋盘</h4><ul><li><p>三角形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: </span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,<span class="number">#bbb</span> <span class="number">25%</span>,transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>棋盘</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: </span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,<span class="number">#bbb</span> <span class="number">25%</span>,transparent <span class="number">0</span>),</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,transparent <span class="number">75%</span>,<span class="number">#bbb</span>  <span class="number">0</span>),</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,<span class="number">#bbb</span> <span class="number">25%</span>,transparent <span class="number">0</span>),</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,transparent <span class="number">75%</span>,<span class="number">#bbb</span>  <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="number">15px</span> <span class="number">15px</span>,<span class="number">15px</span> <span class="number">15px</span>,<span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="伪随机边框"><a href="#伪随机边框" class="headerlink" title="伪随机边框"></a>伪随机边框</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">20</span>,<span class="number">40%</span>,<span class="number">90%</span>);</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,<span class="number">#fb3</span> <span class="number">11px</span>,transparent <span class="number">0</span>),<span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,<span class="number">#ab4</span> <span class="number">23px</span>,transparent <span class="number">0</span>),<span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,<span class="number">#655</span> <span class="number">41px</span>,transparent <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">80px</span> <span class="number">100%</span>,<span class="number">60px</span> <span class="number">100%</span>,<span class="number">40px</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>蝉原则：</p><ul><li>使用质数增加随机性</li></ul><p>《蝉原则在网页设计中的重要性》</p><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><h3 id="自适应的椭圆"><a href="#自适应的椭圆" class="headerlink" title="自适应的椭圆"></a>自适应的椭圆</h3><p>圆形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fb3</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;<span class="comment">/*正方形边长的一半*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>椭圆</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fb3</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50%</span> / <span class="number">50%</span>;<span class="comment">/*长宽的一半*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>半椭圆</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:<span class="number">50%</span> / <span class="number">100%</span> <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">100%</span>  <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span>/<span class="number">50%</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">100%</span>  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a>平行四边形</h3><p>使用<code>skew()</code>的变形属性来对矩形进行斜向拉伸。<code>transform:skewX(-45deg)</code>.为防止内容的斜向变形，还要在元素内部反向变形。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菱形图片"><a href="#菱形图片" class="headerlink" title="菱形图片"></a>菱形图片</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.picture</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.picture</span> &gt; <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">45deg</span>) <span class="built_in">scale</span>(<span class="number">1.42</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">50%</span>,<span class="number">50%</span> <span class="number">100%</span>,<span class="number">0</span> <span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> clip-path;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span> ,<span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>,<span class="number">0</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切角效果"><a href="#切角效果" class="headerlink" title="切角效果"></a>切角效果</h3><p>四边切角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)top left,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)top right,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)bottom right, </span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)bottom left; </span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两边切角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line"><span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)bottom right, </span><br><span class="line">    <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)bottom left; </span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弧形切角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at top left,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)top left,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at top right,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)top right,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at bottom right,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)bottom right,</span><br><span class="line">    <span class="built_in">radial-gradient</span>(circle at bottom left,transparent <span class="number">15px</span>,<span class="number">#58a</span> <span class="number">0</span>)bottom left;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="梯形标签页"><a href="#梯形标签页" class="headerlink" title="梯形标签页"></a>梯形标签页</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">3em</span> <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>:-<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">        <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">6</span>),</span><br><span class="line">        <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,<span class="number">0</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">5em</span> .<span class="number">5em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> .<span class="number">15em</span> white inset;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">perspective</span>(.<span class="number">5em</span>) <span class="built_in">rotateX</span>(<span class="number">5deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>:bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="视觉效果"><a href="#视觉效果" class="headerlink" title="视觉效果"></a>视觉效果</h2><h3 id="单侧投影"><a href="#单侧投影" class="headerlink" title="单侧投影"></a>单侧投影</h3><ul><li><p>单侧投影</p><p><code>box-shadow: 水平偏移量，垂直偏移量，投影长度，扩张半径，颜色;</code>当扩张半径为负的投影长度时，则可达到隐藏效果，只显示其中一条投影</p><ul><li>只有底边有投影：<code>  box-shadow: 0 5px 4px -4px Black;</code></li><li>只有右边有投影<code>box-shadow: 5px 0 4px -4px Black;</code></li></ul></li><li><p>邻边投影</p><ul><li><code>box-shadow: 水平偏移量，垂直偏移量，投影长度，扩张半径，投影颜色;</code>水平偏移量和垂直偏移量要大于模糊半径的一半</li><li><code>box-shadow: 5px 5px 8px -4px Black;</code></li></ul></li><li><p>双侧投影</p><ul><li>投影设置在对边</li><li>将单侧投影设置两次</li><li><code>  box-shadow: 5px 0 5px -5px Black,-5px 0 5px -5px Black;</code></li></ul></li></ul><h3 id="不规则投影"><a href="#不规则投影" class="headerlink" title="不规则投影"></a>不规则投影</h3><p><a href="https://www.w3.org/TR/filter-effects/">滤镜效果规范</a></p><h3 id="染色效果"><a href="#染色效果" class="headerlink" title="染色效果"></a>染色效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">transition</span>:.<span class="number">5s</span> filter;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">sepia</span>(<span class="number">1</span>) <span class="built_in">saturate</span>(<span class="number">4</span>) <span class="built_in">hue-rotate</span>(<span class="number">295deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">img</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">filter</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;<span class="comment">/*使用超链接包裹图片*/</span></span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">hsl</span>(<span class="number">335</span>, <span class="number">100%</span>,<span class="number">50%</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    mix-blend-mode: luminosity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="毛玻璃效果"><a href="#毛玻璃效果" class="headerlink" title="毛玻璃效果"></a>毛玻璃效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">main</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;fw.png&quot;</span>) <span class="number">0</span> / cover fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>, .<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="折角效果"><a href="#折角效果" class="headerlink" title="折角效果"></a>折角效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#58a</span>;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">linear-gradient</span>(to left bottom,transparent <span class="number">50%</span>,<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>) <span class="number">0</span>) no-repeat <span class="number">100%</span> <span class="number">0</span> / <span class="number">2em</span> <span class="number">2em</span>,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>,transparent <span class="number">1.5em</span>,<span class="number">#58a</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字体排印"><a href="#字体排印" class="headerlink" title="字体排印"></a>字体排印</h2><h3 id="连字符断行"><a href="#连字符断行" class="headerlink" title="连字符断行"></a>连字符断行</h3><h3 id="插入换行"><a href="#插入换行" class="headerlink" title="插入换行"></a>插入换行</h3><h3 id="文本行的斑马条纹"><a href="#文本行的斑马条纹" class="headerlink" title="文本行的斑马条纹"></a>文本行的斑马条纹</h3><h3 id="调整tab的宽度"><a href="#调整tab的宽度" class="headerlink" title="调整tab的宽度"></a>调整tab的宽度</h3><h3 id="连字"><a href="#连字" class="headerlink" title="连字"></a>连字</h3><h3 id="华丽的-amp-符号"><a href="#华丽的-amp-符号" class="headerlink" title="华丽的&amp;符号"></a>华丽的&amp;符号</h3><h3 id="自定义下划线"><a href="#自定义下划线" class="headerlink" title="自定义下划线"></a>自定义下划线</h3><h3 id="现实中的文字效果"><a href="#现实中的文字效果" class="headerlink" title="现实中的文字效果"></a>现实中的文字效果</h3><h3 id="环形文字"><a href="#环形文字" class="headerlink" title="环形文字"></a>环形文字</h3><h2 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h2><h3 id="选用合适的鼠标光标"><a href="#选用合适的鼠标光标" class="headerlink" title="选用合适的鼠标光标"></a>选用合适的鼠标光标</h3><h3 id="扩大可点击区域"><a href="#扩大可点击区域" class="headerlink" title="扩大可点击区域"></a>扩大可点击区域</h3><h3 id="自定义复选框"><a href="#自定义复选框" class="headerlink" title="自定义复选框"></a>自定义复选框</h3><h3 id="通过阴影柔化背景"><a href="#通过阴影柔化背景" class="headerlink" title="通过阴影柔化背景"></a>通过阴影柔化背景</h3><h3 id="通过模糊弱化背景"><a href="#通过模糊弱化背景" class="headerlink" title="通过模糊弱化背景"></a>通过模糊弱化背景</h3><h3 id="滚动提示"><a href="#滚动提示" class="headerlink" title="滚动提示"></a>滚动提示</h3><h3 id="交互式图片对比控件"><a href="#交互式图片对比控件" class="headerlink" title="交互式图片对比控件"></a>交互式图片对比控件</h3><h2 id="结构与布局"><a href="#结构与布局" class="headerlink" title="结构与布局"></a>结构与布局</h2><h3 id="自定义内部元素"><a href="#自定义内部元素" class="headerlink" title="自定义内部元素"></a>自定义内部元素</h3><h3 id="精确控制表格列宽"><a href="#精确控制表格列宽" class="headerlink" title="精确控制表格列宽"></a>精确控制表格列宽</h3><h3 id="根据兄弟元素的数量设置样式"><a href="#根据兄弟元素的数量设置样式" class="headerlink" title="根据兄弟元素的数量设置样式"></a>根据兄弟元素的数量设置样式</h3><h3 id="满幅的背景，定宽的内容"><a href="#满幅的背景，定宽的内容" class="headerlink" title="满幅的背景，定宽的内容"></a>满幅的背景，定宽的内容</h3><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><h3 id="紧贴底部的页脚"><a href="#紧贴底部的页脚" class="headerlink" title="紧贴底部的页脚"></a>紧贴底部的页脚</h3><h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><h3 id="缓动效果"><a href="#缓动效果" class="headerlink" title="缓动效果"></a>缓动效果</h3><h3 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h3><h3 id="闪烁效果"><a href="#闪烁效果" class="headerlink" title="闪烁效果"></a>闪烁效果</h3><h3 id="打字动画"><a href="#打字动画" class="headerlink" title="打字动画"></a>打字动画</h3><h3 id="状态平滑的动画"><a href="#状态平滑的动画" class="headerlink" title="状态平滑的动画"></a>状态平滑的动画</h3><h3 id="沿环形路径平移的动画"><a href="#沿环形路径平移的动画" class="headerlink" title="沿环形路径平移的动画"></a>沿环形路径平移的动画</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26745943/&quot;&gt;CSS揭秘&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;编码技巧&quot;&gt;&lt;a href=&quot;#编码技巧&quot; class=&quot;headerlink&quot; title=&quot;编码技巧&quot;&gt;&lt;/a&gt;编码技巧&lt;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="读书笔记" scheme="http://example.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript忍者秘籍</title>
    <link href="http://example.com/2021/02/17/JavaScript%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D/"/>
    <id>http://example.com/2021/02/17/JavaScript%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D/</id>
    <published>2021-02-17T08:19:17.000Z</published>
    <updated>2021-05-05T06:18:13.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript忍者秘籍"><a href="#JavaScript忍者秘籍" class="headerlink" title="JavaScript忍者秘籍"></a>JavaScript忍者秘籍</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>了解市场上的JavaScript库，如jQuery，prototype，base2</p><p>掌握跨浏览器开发。</p><p>掌握测试方法。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运用日志记录和断点进行调试。<code>console.log()</code></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><ul><li>函数为什么如此重要</li><li>函数为什么是第一型对象</li><li>浏览器如何调用函数</li><li>函数声明</li><li>参数赋值之谜</li><li>函数上下文</li></ul></blockquote><p>第一型(first-class)对象</p><p>函数可以共处，可以被视为任意类型的JavaScript变量，被任意变量进行引用，或进行传递。</p><p>浏览器的事件轮询是单线程的，遵循FIFO顺序（先进先出）。</p><p><code>window.onload()</code>调用函数</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><ul><li>作为一个函数被调用</li><li>作为一个方法被调用，在对象上进行调用，支持面向对象编程</li><li>作为<strong>构造器</strong>进行调用</li><li>通过apply()或call()进行调用</li></ul><h3 id="参数声明"><a href="#参数声明" class="headerlink" title="参数声明"></a>参数声明</h3><ul><li>如果声明的参数数量大于实际传递的参数数量，则没有对应参数的形参会声明为undefined</li><li>如果声明的参数数量小于实际传递的参数数量，超出的参数则不会配给形参名称</li><li><strong>隐式参数：argument，this</strong></li></ul><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><h2 id="挥舞函-数"><a href="#挥舞函-数" class="headerlink" title="挥舞函 数"></a>挥舞函 数</h2><blockquote><ul><li>匿名函数为什么如此重要</li><li>函数调用时的引用形式，包括递归</li><li>函数引用的存储</li><li>函数上下文的利用</li><li>处理可变长度的参数列表</li><li>判断一个对象是否是函数</li></ul></blockquote><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ninja = &#123;</span><br><span class="line">    shout:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">ninja.shout();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;,<span class="number">500</span>);</span><br></pre></td></tr></table></figure><h4 id="对象中的方法递归"><a href="#对象中的方法递归" class="headerlink" title="对象中的方法递归"></a>对象中的方法递归</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ninja = &#123;</span><br><span class="line">    chirp:<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">1</span>?ninja.chirp(n-<span class="number">1</span>)+<span class="string">&quot;-chirp&quot;</span>:<span class="string">&quot;chirp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">assert(ninja.chirp(<span class="number">3</span>) == <span class="string">&quot;chirp-chirp-chirp&quot;</span>,<span class="string">&quot;。。。&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="存储一组独立的函数"><a href="#存储一组独立的函数" class="headerlink" title="存储一组独立的函数"></a>存储一组独立的函数</h4><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>一个简单的闭包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> outerValue = <span class="string">&#x27;ninja&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">outerFunction</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.assert(outerValue == <span class="string">&quot;ninja&quot;</span>,<span class="string">&quot;i can see the ninja&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">        outerFunction();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个不那么简单的闭包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> outerValue = <span class="string">&#x27;ninja&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> later;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">outerFunction</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> innerValue = <span class="string">&#x27;samurai&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">innerFunction</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.assert(outerValue,<span class="string">&quot;i can see ninja&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.assert(innerValue,<span class="string">&quot;i can see samurai&quot;</span>);</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        later = innerFunction;</span><br><span class="line">    &#125;</span><br><span class="line">    outerFunction();</span><br><span class="line">    later();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用闭包模拟私有变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> feints = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">this</span>.getFeints = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">return</span> feints;</span></span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">       <span class="built_in">this</span>.feint = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            feints++;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">   &#125;</span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();</span></span><br><span class="line">   ninja.feint();</span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.assert(ninja.getFeints()==<span class="number">1</span>,<span class="string">&quot;internal feint count&quot;</span>);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.assert(ninja.feints==<span class="literal">undefined</span>,<span class="string">&quot;data is inaccessible&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一个使用闭包的最常见情形就是处理回调或使用定时器。</p><h2 id="原型与面向对象"><a href="#原型与面向对象" class="headerlink" title="原型与面向对象"></a>原型与面向对象</h2><blockquote><ul><li>利用函数实现构造器</li><li>探索原型</li><li>利用原型实现对象的扩展</li><li>避免常见的问题</li><li>构建可继承的类</li></ul></blockquote><h3 id="利用原型方法创建一个新实例"><a href="#利用原型方法创建一个新实例" class="headerlink" title="利用原型方法创建一个新实例"></a>利用原型方法创建一个新实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;&#125;;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    Ninja.prototype.swingSword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="comment">//函数作为函数进行调用</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ninja1 = Ninja();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.assert(ninja1 === underfined,<span class="string">&quot;no instance of ninja created&quot;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">//函数作为构造器进行调用</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ninja2 = <span class="keyword">new</span> Ninja();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.assert(ninja2&amp;&amp;ninja2.swingSword&amp;&amp;ninja2.swingSword(),<span class="string">&quot;instance exists and method is callable&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="继承与原型链"><a href="#继承与原型链" class="headerlink" title="继承与原型链"></a>继承与原型链</h3><p>通过prototype，让ninja拥有person的跳舞能力。但ninja不是一个Person</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123; &#125;;</span></span><br><span class="line"><span class="javascript">    Person.prototype.dance = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;&#125;;</span></span><br><span class="line">    Ninja.prototype = &#123;dance:Person.prototype.dance&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Ninja);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Person);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个原型链"><a href="#创建一个原型链" class="headerlink" title="创建一个原型链"></a><strong>创建一个原型链</strong></h3><p><code>SubClass.prototype = new SuperClass()</code></p><p><code>Ninja.prototype = new Person()</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123; &#125;;</span></span><br><span class="line"><span class="javascript">    Person.prototype.dance = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;&#125;;</span></span><br><span class="line"><span class="javascript">    Ninja.prototype = <span class="keyword">new</span> Person();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Ninja);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Person);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过HTMLElement的原型，给元素添加一个新方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    HTMLElement.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.parentNode) <span class="built_in">this</span>.parentNode.removeChild(<span class="built_in">this</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line">    a.parentNode.removeChild(a);</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;b&quot;</span>).remove();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(!<span class="built_in">document</span>.getElementById(<span class="string">&quot;a&quot;</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(!<span class="built_in">document</span>.getElementById(<span class="string">&quot;b&quot;</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h3><h4 id="给Object原型添加额外属性会发生的行为"><a href="#给Object原型添加额外属性会发生的行为" class="headerlink" title="给Object原型添加额外属性会发生的行为"></a>给Object原型添加额外属性会发生的行为</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.prototype.keys = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> keys = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> <span class="built_in">this</span>) keys.push(p);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> keys;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj.keys().length);<span class="comment">//结果返回了4</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用hasOwnProperty进行修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.prototype.keys = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> keys = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> <span class="built_in">this</span>) </span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">this</span>.hasOwnProperty(p)) keys.push(p);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> keys;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj.keys().length);<span class="comment">//结果返回了4</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="扩展数字"><a href="#扩展数字" class="headerlink" title="扩展数字"></a>扩展数字</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Number</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>+num;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> n = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(n.add(<span class="number">3</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log((<span class="number">5</span>).add(<span class="number">3</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="number">5.</span>add(<span class="number">3</span>));<span class="comment">//报错，因为语法解析器不能处理字面量的情况</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Person  =<span class="built_in">Object</span>.subClass(&#123;</span></span><br><span class="line"><span class="javascript">        init:<span class="function"><span class="keyword">function</span>(<span class="params">isDancing</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.dancing =  isDancing;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        dance:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>.dancing;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Ninja = Person.subClass(&#123;</span></span><br><span class="line"><span class="javascript">        init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>._super(<span class="literal">false</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        dance:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>._super();    </span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        swingSword:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(person.dance());</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja.dance());</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja.swingSword());</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> Person);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Ninja);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Person);</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id="驯服线程和定时器"><a href="#驯服线程和定时器" class="headerlink" title="驯服线程和定时器"></a>驯服线程和定时器</h2><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>定时器的操作方法</p><table><thead><tr><th>方法</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>setTimeout</td><td>id = setTimeout(fn,delay)</td><td>启动一个定时器，在一段时间delay之后执行传入的callback，并返回该定时器的唯一标识</td></tr><tr><td>clearTimeout</td><td>clearTimeout(id)</td><td>如果定时器还未触发，则可取消该定时器</td></tr><tr><td>setInterval</td><td>id = setInterval(fn,delay)</td><td>启动一个定时器，在每隔一段时间delay之后都执行传入的callback，并返回该定时器的唯一标识</td></tr><tr><td>clearInterval</td><td>clearInterval(id)</td><td>传入间隔定时器标识，取消间隔定时器</td></tr></tbody></table><h2 id="运行时代码求值"><a href="#运行时代码求值" class="headerlink" title="运行时代码求值"></a>运行时代码求值</h2><blockquote><ul><li><p>运行时代码求值如何工作的</p></li><li><p>代码求值的不同技术</p></li><li><p>在应用程序中代码求值</p></li><li><p>函数反编译</p></li><li><p>命名空间</p></li><li><p>压缩与混淆</p></li></ul></blockquote><ol><li>求值方式包括<ul><li>eval()函数</li><li>函数构造器</li><li>定时器</li><li><code>&lt;script&gt;</code>元素</li></ul></li><li></li></ol><h2 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h2><h2 id="开发跨浏览器策略"><a href="#开发跨浏览器策略" class="headerlink" title="开发跨浏览器策略"></a>开发跨浏览器策略</h2><h2 id="洞悉特性、属性和样式"><a href="#洞悉特性、属性和样式" class="headerlink" title="洞悉特性、属性和样式"></a>洞悉特性、属性和样式</h2><h2 id="不老事件"><a href="#不老事件" class="headerlink" title="不老事件"></a>不老事件</h2><h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><h2 id="CSS选择器引擎"><a href="#CSS选择器引擎" class="headerlink" title="CSS选择器引擎"></a>CSS选择器引擎</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript忍者秘籍&quot;&gt;&lt;a href=&quot;#JavaScript忍者秘籍&quot; class=&quot;headerlink&quot; title=&quot;JavaScript忍者秘籍&quot;&gt;&lt;/a&gt;JavaScript忍者秘籍&lt;/h1&gt;&lt;h2 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptDOM</title>
    <link href="http://example.com/2021/02/11/JavaScriptDOM/"/>
    <id>http://example.com/2021/02/11/JavaScriptDOM/</id>
    <published>2021-02-11T05:06:39.000Z</published>
    <updated>2021-03-15T12:55:36.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript导入"><a href="#JavaScript导入" class="headerlink" title="JavaScript导入"></a>JavaScript导入</h2><ol><li>将JavaScript代码放到<code>&lt;header&gt;</code>标签中的<code>&lt;script&gt;</code>中</li><li>将JavaScript代码存进.js文件中，使用<code>&lt;script src=&quot;&quot;&gt;</code>导入。最好的方法是放到<code>&lt;/body&gt;</code>之前</li></ol><h2 id="javascript-语法"><a href="#javascript-语法" class="headerlink" title="javascript  语法"></a>javascript  语法</h2><ul><li><p>语句</p><ul><li>多条语句放在不同得行上就可以分隔它们</li><li>多条语句放在同一行上：用分号分隔</li><li>建议在每条语句后都加入分号</li></ul></li><li><p>注释</p><ul><li>用<code>//</code>  注释单行，<code>/**/</code>注释多行</li></ul></li><li><p>声明和赋值</p><ul><li><code>var a=&quot;happy&quot;,x = 33</code></li></ul></li><li><p>转义</p><ul><li>使用反斜线<code>\</code>进行转义</li></ul></li><li><p>关联数组（不推荐使用） <code>var lemon = Array();lemon[&quot;name&quot;] = &quot;John&quot;</code></p></li><li><p>拼接</p><ul><li>字符串+数值  返回字符串；<code>alert(&quot;10&quot;+20)  //返回“1020”</code></li><li>数值+字符串  返回数值的算术和<code>alert(10+“20”)  //返回30</code></li></ul></li><li><p>对象</p><ul><li><p>有属性和方法</p></li><li><p><strong>继承</strong></p></li></ul></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li><p>点击链接切换图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">title</span>=<span class="string">&quot;罗云熙&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showpic(this);return false;&quot;</span>&gt;</span>罗云熙<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;2.jpg&quot;</span> <span class="attr">title</span>=<span class="string">&quot;王一博&quot;</span><span class="attr">onclick</span>=<span class="string">&quot;showpic(this);return false;&quot;</span>&gt;</span>王一博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;3.jpg&quot;</span> <span class="attr">title</span>=<span class="string">&quot;赵丽颖&quot;</span><span class="attr">onclick</span>=<span class="string">&quot;showpic(this);return false;&quot;</span>&gt;</span>赵丽颖<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;placeholder&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showpic</span>(<span class="params">whichpic</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> source = whichpic.getAttribute(<span class="string">&quot;href&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">&quot;placeholder&quot;</span>);</span></span><br><span class="line"><span class="javascript">            placeholder.setAttribute(<span class="string">&quot;src&quot;</span>,source);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>window.open(url,name,features)</code>创建新的浏览器窗口</p><ul><li>features : 新窗口的属性，如尺寸、启动和禁用的功能等</li></ul></li></ul><h2 id="DOM-Core"><a href="#DOM-Core" class="headerlink" title="DOM Core"></a>DOM Core</h2><ul><li>getElementById</li><li>getElementByTagName</li><li>getElementByClassName</li><li>getAttribute</li><li>setAttribute</li></ul><h2 id="动态创建标记"><a href="#动态创建标记" class="headerlink" title="动态创建标记"></a>动态创建标记</h2><ul><li>document.write</li><li>createElement</li><li>appendChild</li><li>createTextNode</li></ul><ul><li>nextSibling  查找下一个节点</li><li>setTimeout  让某个函数在经过一段时间后才开始执行</li></ul><ul><li>CSS中的overflow属性用来处理一个元素的尺寸超出其容器的情况。可取值如下：<ul><li>visible:不裁剪溢出的内容。浏览器吧溢出的内容呈现在其元素的显示区域以外，全部内容都可见。</li><li>hidden:隐藏溢出的内容。内容只显示在容器的显示区域里，只有以部分内容可见。</li><li>scroll:对溢出的内容进行隐藏，但显示一个滚动条以便让用户看到内容的其他部分。</li><li>auto:只有发生溢出时才显示滚动条。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JavaScript导入&quot;&gt;&lt;a href=&quot;#JavaScript导入&quot; class=&quot;headerlink&quot; title=&quot;JavaScript导入&quot;&gt;&lt;/a&gt;JavaScript导入&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;将JavaScript代码放到&lt;code&gt;&amp;lt</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSSCode</title>
    <link href="http://example.com/2021/02/10/CSSCode/"/>
    <id>http://example.com/2021/02/10/CSSCode/</id>
    <published>2021-02-10T09:11:52.000Z</published>
    <updated>2021-03-15T12:57:18.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文字和字体"><a href="#1-文字和字体" class="headerlink" title="1 文字和字体"></a>1 文字和字体</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*$1.1 自定义字体*/</span></span><br><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: xujinglei;<span class="comment">/*字体名称*/</span></span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">xujinglei.ttf</span>),<span class="built_in">url</span>(<span class="string">xujinglei.eot</span>);<span class="comment">/*字体路径*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: xujinglei;<span class="comment">/*使用字体*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*$1.2 首字符下沉*/</span></span><br><span class="line"><span class="selector-id">#a</span>&#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b</span>&#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: -<span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#c</span>&#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b</span><span class="selector-pseudo">::first-letter</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#c</span><span class="selector-pseudo">::first-letter</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#b23aee</span>;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>;<span class="comment">/*下沉必须浮动*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.uppercase</span><span class="selector-pseudo">::first-letter</span>&#123;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;<span class="comment">/*大写*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*$1.3 文本被选中时的样式*/</span></span><br><span class="line"><span class="selector-pseudo">::selection</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: silver;</span><br><span class="line">    <span class="attribute">color</span>:gold;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-selection&#123; /*firefox设置*/</span><br><span class="line">    background-color: silver;</span><br><span class="line">    <span class="attribute">color</span>:gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*$1.4 文本对齐*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.duiqi</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;<span class="comment">/*居中*/</span></span><br><span class="line">    <span class="comment">/*text-align: left;  左对齐*/</span></span><br><span class="line">    <span class="comment">/*text-align: right;  右对齐*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">15px</span>; <span class="comment">/*行高设置*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*$1.5 设置文字、字符的间距*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.wordspacing</span>&#123;<span class="attribute">word-spacing</span>:<span class="number">20px</span>;&#125;<span class="comment">/*设置空格的长度*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.letterspacing</span>&#123;<span class="attribute">letter-spacing</span>:<span class="number">20px</span>;&#125;<span class="comment">/*设置字间距*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.lineheight</span>&#123;<span class="attribute">line-height</span>:O.<span class="number">3</span>;&#125;<span class="comment">/*设置行间距*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.whitespace_normal</span>&#123;<span class="attribute">white-space</span>:normal;&#125;<span class="comment">/*默认，忽略多个空格为1个，忽略回车符*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.whitespace_pre</span>&#123;<span class="attribute">white-space</span>:pre;&#125;<span class="comment">/*保留多个空格*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.whitespace_nowrap</span>&#123;<span class="attribute">white-space</span>:nowrap;&#125;<span class="comment">/*忽略回车符，禁止换行，直到遇到br*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.whitespace_prewrap</span>&#123;<span class="attribute">white-space</span>:pre-wrap;&#125;<span class="comment">/*保留所有空格符与回车符*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.whitespace_preline</span>&#123;<span class="attribute">white-space</span>:pre-line;&#125;<span class="comment">/*忽略多个空格为1个，保留回车*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*$1.6 文本的装饰——画线、粗体、斜体*/</span></span><br><span class="line"><span class="selector-class">.overline</span>&#123;<span class="attribute">text-decoration</span>: overline;&#125;</span><br><span class="line"><span class="selector-class">.through</span>&#123;<span class="attribute">text-decoration</span>: line-through;&#125;</span><br><span class="line"><span class="selector-class">.underline</span>&#123;<span class="attribute">text-decoration</span>: underline;&#125;</span><br><span class="line"><span class="selector-class">.bold</span>&#123;<span class="attribute">font-weight</span>: bold;&#125;</span><br><span class="line"><span class="selector-class">.italic</span>&#123;<span class="attribute">font-style</span>:italic ;&#125;</span><br><span class="line"><span class="selector-class">.oblique</span>&#123;<span class="attribute">font-style</span>:oblique ;&#125;</span><br><span class="line"><span class="comment">/*$1.7 文字阴影*/</span></span><br><span class="line"><span class="selector-class">.shadow</span>&#123;<span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#6600ff</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*$1.8 毛玻璃效果*/</span></span><br><span class="line"><span class="selector-class">.shadow-glass</span>&#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*$1.9 文本溢出处理*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">常见的溢出处理方式：</span></span><br><span class="line"><span class="comment">    简单裁切</span></span><br><span class="line"><span class="comment">    简单隐藏</span></span><br><span class="line"><span class="comment">    隐藏并显示省略号</span></span><br><span class="line"><span class="comment">    使用滚动条</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*简单裁切*/</span></span><br><span class="line"><span class="selector-class">.hide</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*简单隐藏*/</span></span><br><span class="line"><span class="selector-class">.scroll</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*隐藏并显示省略号*/</span></span><br><span class="line"><span class="selector-class">.clip</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: clip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*使用滚动条*/</span></span><br><span class="line"><span class="selector-class">.elli</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*$1.10  金属质感文字*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">添加一个使用半透明和渐变效果的遮罩层</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.cover</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom,black <span class="number">0%</span>,transparent <span class="number">50%</span>,black);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;<span class="comment">/*设置透明度*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-边框和图片"><a href="#2-边框和图片" class="headerlink" title="2 边框和图片"></a>2 边框和图片</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h3 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h3><h3 id="微博发布框"><a href="#微博发布框" class="headerlink" title="微博发布框"></a>微博发布框</h3><h3 id="拍立得效果框"><a href="#拍立得效果框" class="headerlink" title="拍立得效果框"></a>拍立得效果框</h3><h3 id="CSS3-动画边框"><a href="#CSS3-动画边框" class="headerlink" title="CSS3 动画边框"></a>CSS3 动画边框</h3><h3 id="边框移动特效"><a href="#边框移动特效" class="headerlink" title="边框移动特效"></a>边框移动特效</h3><h3 id="Banner图片的标签"><a href="#Banner图片的标签" class="headerlink" title="Banner图片的标签"></a>Banner图片的标签</h3><h3 id="黑白图片"><a href="#黑白图片" class="headerlink" title="黑白图片"></a>黑白图片</h3><h3 id="图片水印"><a href="#图片水印" class="headerlink" title="图片水印"></a>图片水印</h3><h3 id="图片细节放大展示"><a href="#图片细节放大展示" class="headerlink" title="图片细节放大展示"></a>图片细节放大展示</h3><h3 id="图片瀑布流"><a href="#图片瀑布流" class="headerlink" title="图片瀑布流"></a>图片瀑布流</h3><h3 id="幻灯片"><a href="#幻灯片" class="headerlink" title="幻灯片"></a>幻灯片</h3><h3 id="手风琴"><a href="#手风琴" class="headerlink" title="手风琴"></a>手风琴</h3><h3 id="图片自适应"><a href="#图片自适应" class="headerlink" title="图片自适应"></a>图片自适应</h3><h3 id="纯CSS绘制图像"><a href="#纯CSS绘制图像" class="headerlink" title="纯CSS绘制图像"></a>纯CSS绘制图像</h3><h3 id="图片原地放大"><a href="#图片原地放大" class="headerlink" title="图片原地放大"></a>图片原地放大</h3><h3 id="图片翻转"><a href="#图片翻转" class="headerlink" title="图片翻转"></a>图片翻转</h3><h3 id="图像地图"><a href="#图像地图" class="headerlink" title="图像地图"></a>图像地图</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-文字和字体&quot;&gt;&lt;a href=&quot;#1-文字和字体&quot; class=&quot;headerlink&quot; title=&quot;1 文字和字体&quot;&gt;&lt;/a&gt;1 文字和字体&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>精通CSS</title>
    <link href="http://example.com/2021/02/08/%E7%B2%BE%E9%80%9Acss/"/>
    <id>http://example.com/2021/02/08/%E7%B2%BE%E9%80%9Acss/</id>
    <published>2021-02-08T08:19:29.000Z</published>
    <updated>2021-03-15T12:58:06.796Z</updated>
    
    <content type="html"><![CDATA[<p>删除每个元素默认的浏览器内边距和外边距</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;删除每个元素默认的浏览器内边距和外边距&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="读书笔记" scheme="http://example.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSS 选择器世界</title>
    <link href="http://example.com/2021/02/08/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%96%E7%95%8C/"/>
    <id>http://example.com/2021/02/08/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%96%E7%95%8C/</id>
    <published>2021-02-08T02:19:29.000Z</published>
    <updated>2021-02-18T07:19:30.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><h3 id="1-1为什么CSS选择器很强"><a href="#1-1为什么CSS选择器很强" class="headerlink" title="1.1为什么CSS选择器很强"></a>1.1为什么CSS选择器很强</h3><p>CSS为样式服务，重表现，轻逻辑。</p><h3 id="1-2CSS选择器世界的一些基本概念"><a href="#1-2CSS选择器世界的一些基本概念" class="headerlink" title="1.2CSS选择器世界的一些基本概念"></a>1.2CSS选择器世界的一些基本概念</h3><h4 id="1-2-1选择器、选择符、伪类和伪元素"><a href="#1-2-1选择器、选择符、伪类和伪元素" class="headerlink" title="1.2.1选择器、选择符、伪类和伪元素"></a>1.2.1选择器、选择符、伪类和伪元素</h4><p>选择器： 是CSS语句块前的标签、类名等，如<code>body&#123;font:menu&#125;</code>中的body</p><p>选择符：后代选择符空格()，子选择符箭头(&gt;)，相邻兄弟选择符加号(+)，随后兄弟选择符弯弯(~)，列选择符双管道(||)。</p><p>（详见第4章）</p><p>伪类：与用户行为有关，前面有一个<code>:</code>的，如<code>：hover</code></p><p>伪元素：前面有两个冒号的</p><h4 id="1-2-2CSS选择器的作用域"><a href="#1-2-2CSS选择器的作用域" class="headerlink" title="1.2.2CSS选择器的作用域"></a>1.2.2CSS选择器的作用域</h4><p>有局部作用域</p><p>Shadow DOM与局部作用域实例页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个普通的<span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span>元素，我的背景色是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hostElement&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 shadow DOM</span></span><br><span class="line"><span class="keyword">var</span> shadow = hostElement.attachShadow(&#123;<span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 给 shadow DOM 添加文字</span></span><br><span class="line">shadow.innerHTML = <span class="string">&#x27;&lt;p&gt;我是由Shadow DOM创建的&amp;lt;p&amp;gt;元素，我的背景色是？&lt;/p&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">// 添加CSS，文字背景色变成黑色</span></span><br><span class="line">shadow.innerHTML += <span class="string">&#x27;&lt;style&gt;p &#123; background-color: #333; color: #fff; &#125;&lt;/style&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-CSS选择器的命名空间"><a href="#1-2-3-CSS选择器的命名空间" class="headerlink" title="1.2.3 CSS选择器的命名空间"></a>1.2.3 CSS选择器的命名空间</h4><p>命名空间：namespace</p><p>作用：避免冲突</p><p>（了解即可）</p><h3 id="1-3无效CSS选择器特性与实际应用"><a href="#1-3无效CSS选择器特性与实际应用" class="headerlink" title="1.3无效CSS选择器特性与实际应用"></a>1.3无效CSS选择器特性与实际应用</h3><p>使用新的CSS选择器时，为了避免浏览器之间不同的支持程度，因此最好分开书写。</p><p>例外：浏览器可以识别以-webkit-私有前缀开头的伪元素</p><h2 id="2-CSS选择器的优先级"><a href="#2-CSS选择器的优先级" class="headerlink" title="2 CSS选择器的优先级"></a>2 CSS选择器的优先级</h2><h3 id="2-1CSS优先级规则概览"><a href="#2-1CSS优先级规则概览" class="headerlink" title="2.1CSS优先级规则概览"></a>2.1CSS优先级规则概览</h3><p>级别越高，优先级越高：</p><ol><li>0级：通配选择器(*)、选择符{<code>+</code>,<code>&gt;</code>,<code>~</code>,空格,<code>||</code>}、逻辑组合伪类<code>:not(),:is(),:where</code></li><li>1级：标签选择器<code>body&#123;&#125;,p&#123;&#125;</code></li><li>2级：类选择器<code>.foo&#123;&#125;</code>  属性选择器<code>[foo]&#123;&#125;</code>、伪类<code>:hover&#123;&#125;</code></li><li>3级：id选择器<code>#foo&#123;&#125;</code></li><li>4级：style属性内联<code>&lt;div style=&quot;color:#000000&quot;&gt;</code></li><li>5级：！important顶级优先级</li></ol><h3 id="2-2深入CSS选择器优先级"><a href="#2-2深入CSS选择器优先级" class="headerlink" title="2.2深入CSS选择器优先级"></a>2.2深入CSS选择器优先级</h3><h4 id="2-2-1-CSS选择器优先级的计算规则"><a href="#2-2-1-CSS选择器优先级的计算规则" class="headerlink" title="2.2.1 CSS选择器优先级的计算规则"></a>2.2.1 CSS选择器优先级的计算规则</h4><p>0级选择器：优先级数值+0；1级选择器：优先级数值+1；2级选择器：优先级数值+10；3级选择器：优先级数值+100；</p><p>优先级数值一样：遵循“后来居上”原则，后渲染的优先级高。这是相对于整个页面文档，所以css文件的引入顺序也很重要。</p><ul><li>增加CSS优先级的技巧<ul><li>重复选择器自身<code>.foo.foo&#123;&#125;</code></li><li>借助必然会存在的属性选择器<code>.foo[class]&#123;&#125;</code></li></ul></li></ul><h4 id="2-2-2-256个选择器的越级现象"><a href="#2-2-2-256个选择器的越级现象" class="headerlink" title="2.2.2 256个选择器的越级现象"></a>2.2.2 256个选择器的越级现象</h4><p>256个标签选择器的优先级大于类名选择器，因为出现了溢出。</p><h2 id="3-CSS选择器的命名"><a href="#3-CSS选择器的命名" class="headerlink" title="3 CSS选择器的命名"></a>3 CSS选择器的命名</h2><h3 id="3-1CSS选择器是否区分大小写"><a href="#3-1CSS选择器是否区分大小写" class="headerlink" title="3.1CSS选择器是否区分大小写"></a>3.1CSS选择器是否区分大小写</h3><table><thead><tr><th>-选择器类型</th><th>-示例</th><th>-是否对大小写敏感</th></tr></thead><tbody><tr><td>标签选择器</td><td>div{}</td><td>不敏感</td></tr><tr><td>属性选择器-纯属性</td><td>[attr]</td><td>不敏感</td></tr><tr><td>属性选择器</td><td>[attr=val]</td><td>属性值敏感</td></tr><tr><td>类选择器</td><td>.container{}</td><td>敏感</td></tr><tr><td>ID选择器</td><td>#foo{}</td><td>敏感</td></tr></tbody></table><h3 id="3-2CSS选择器命名的合法性"><a href="#3-2CSS选择器命名的合法性" class="headerlink" title="3.2CSS选择器命名的合法性"></a>3.2CSS选择器命名的合法性</h3><ul><li><p>类名选择器和ID选择器不能以数字开头</p><p><code>.\31-foo&#123;&#125;</code>   <code>&lt;span class=&quot;1-foo&quot;&gt;string&lt;/span&gt;</code></p></li><li><p>以字符开头的选择器需要转义</p></li><li><p>支持中文字符和中文标点符号</p></li><li><p>支持emoji表情</p></li></ul><h3 id="3-3CSS选择器的命名是一个哲学问题"><a href="#3-3CSS选择器的命名是一个哲学问题" class="headerlink" title="3.3CSS选择器的命名是一个哲学问题"></a>3.3CSS选择器的命名是一个哲学问题</h3><h4 id="3-3-1长命名还是短命名"><a href="#3-3-1长命名还是短命名" class="headerlink" title="3.3.1长命名还是短命名"></a>3.3.1长命名还是短命名</h4><p>使用短命名</p><h4 id="3-3-2单命名还是组合命名"><a href="#3-3-2单命名还是组合命名" class="headerlink" title="3.3.2单命名还是组合命名"></a>3.3.2单命名还是组合命名</h4><ul><li>使用前缀将常见的单词模块保护起来，避免冲突。<ul><li>前缀最好是项目缩写。</li><li>一个项目的前缀最好统一。</li></ul></li></ul><h4 id="3-3-3面向属性的命名和面向语义的命名"><a href="#3-3-3面向属性的命名和面向语义的命名" class="headerlink" title="3.3.3面向属性的命名和面向语义的命名"></a>3.3.3面向属性的命名和面向语义的命名</h4><p>小项目使用面向语义的命名方式，大项目采用面向属性的命名和面向语义的命名结合。</p><p>面向属性的命名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.dn &#123; display: none;&#125;</span><br><span class="line">.db &#123; display: block;&#125; </span><br><span class="line">.df &#123; display:flex;&#125; </span><br><span class="line">.dg &#123; display: grid;&#125;</span><br><span class="line">.fl &#123; float:left;&#125;</span><br><span class="line">.fr &#123; float: right;&#125;</span><br><span class="line">.tl&#123; text-align: left; &#125; </span><br><span class="line">.tr &#123; text-align: right;&#125; </span><br><span class="line">.tc&#123; text-align: center; &#125; </span><br><span class="line">.tj&#123;text-align:justify;&#125;</span><br></pre></td></tr></table></figure><p>面向语义的命名则是根据应用元素所处的上下文来命名的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> .header &#123; background-color: #333; color:#fff;&#125;</span><br><span class="line">.logo &#123; font-size: 0;color:transparent;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4CSS选择器设计的最佳实践"><a href="#3-4CSS选择器设计的最佳实践" class="headerlink" title="3.4CSS选择器设计的最佳实践"></a>3.4CSS选择器设计的最佳实践</h3><h4 id="3-4-1不要使用ID选择器"><a href="#3-4-1不要使用ID选择器" class="headerlink" title="3.4.1不要使用ID选择器"></a>3.4.1不要使用ID选择器</h4><p>缺陷：</p><ul><li>优先级太高，不利于覆盖和修改<ul><li>可以使用属性选择器<code>[id=&quot;csId&quot;]</code></li></ul></li><li>和JavaScript耦合,产生bug</li></ul><h4 id="3-4-2不要嵌套选择器"><a href="#3-4-2不要嵌套选择器" class="headerlink" title="3.4.2不要嵌套选择器"></a>3.4.2不要嵌套选择器</h4><p>会限制HTML的结构，不利于后期修改HTML，调整层级和位置。</p><p>错误示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">div</span>&#123;&#125;  </span><br><span class="line"><span class="selector-class">.avatar</span> <span class="selector-tag">img</span> &#123;&#125; </span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.pic</span> <span class="selector-class">.icon</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.upbox</span> <span class="selector-class">.input</span> <span class="selector-class">.upbtn</span>  &#123;&#125;</span><br></pre></td></tr></table></figure><p>正确用法：使用无嵌套的类名选择器</p><h4 id="3-4-3不要歧视面向属性的命名"><a href="#3-4-3不要歧视面向属性的命名" class="headerlink" title="3.4.3不要歧视面向属性的命名"></a>3.4.3不要歧视面向属性的命名</h4><h4 id="3-4-4正确使用状态类名"><a href="#3-4-4正确使用状态类名" class="headerlink" title="3.4.4正确使用状态类名"></a>3.4.4正确使用状态类名</h4><h4 id="3-4-5最佳实践汇总"><a href="#3-4-5最佳实践汇总" class="headerlink" title="3.4.5最佳实践汇总"></a>3.4.5最佳实践汇总</h4><ol><li>命名<ol><li>命名最好使用小写，用<code>-</code>或<code>_</code>连接</li><li>不推荐驼峰命名，驼峰命名留给JavaScript DOM</li><li>组合个数控制在5个以下</li><li>设置统一前缀</li></ol></li><li>选择器类型选择<ol><li>推荐用属性选择器代替id选择器</li></ol></li></ol><h2 id="4-CSS选择符"><a href="#4-CSS选择符" class="headerlink" title="4 CSS选择符"></a>4 CSS选择符</h2><h3 id="4-1后代选择符空格"><a href="#4-1后代选择符空格" class="headerlink" title="4.1后代选择符空格( )"></a>4.1后代选择符空格( )</h3><h4 id="4-1-1对CSS后代选择符可能错误的认识"><a href="#4-1-1对CSS后代选择符可能错误的认识" class="headerlink" title="4.1.1对CSS后代选择符可能错误的认识"></a>4.1.1对CSS后代选择符可能错误的认识</h4><p>e.g</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lightblue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;darkblue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 颜色是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;darkblue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lightblue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2. 颜色是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.lightblue p &#123; color: lightblue; &#125;</span><br><span class="line">.darkblue p &#123; color: darkblue; &#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2对JavaScript中后代选择符可能错误的认识"><a href="#4-1-2对JavaScript中后代选择符可能错误的认识" class="headerlink" title="4.1.2对JavaScript中后代选择符可能错误的认识"></a>4.1.2对JavaScript中后代选择符可能错误的认识</h4><h3 id="4-2子选择符箭头-gt"><a href="#4-2子选择符箭头-gt" class="headerlink" title="4.2子选择符箭头(&gt;)"></a>4.2子选择符箭头(&gt;)</h3><h4 id="4-2-1子选择符和后代选择符的区别"><a href="#4-2-1子选择符和后代选择符的区别" class="headerlink" title="4.2.1子选择符和后代选择符的区别"></a>4.2.1子选择符和后代选择符的区别</h4><p>子选择符只会匹配第一代子元素，后代选择符会匹配所有的后代。</p><h4 id="4-2-2适合使用子选择符的场景"><a href="#4-2-2适合使用子选择符的场景" class="headerlink" title="4.2.2适合使用子选择符的场景"></a>4.2.2适合使用子选择符的场景</h4><p>尽量不使用</p><p>子选择符会限制HTML的层级关系</p><p>使用场景：</p><ul><li>状态类名控制</li><li>标签受限</li><li>层级位置判断</li></ul><h3 id="4-3相邻兄弟选择符加号"><a href="#4-3相邻兄弟选择符加号" class="headerlink" title="4.3相邻兄弟选择符加号(+)"></a>4.3相邻兄弟选择符加号(+)</h3><p>只能选择相邻的兄弟元素，且只是选择后面一个兄弟。</p><h4 id="4-3-1相邻兄弟选择符的相关细节"><a href="#4-3-1相邻兄弟选择符的相关细节" class="headerlink" title="4.3.1相邻兄弟选择符的相关细节"></a>4.3.1相邻兄弟选择符的相关细节</h4><p>忽略文本节点</p><p>忽略注释</p><h4 id="4-3-2实现类似-first-child的效果"><a href="#4-3-2实现类似-first-child的效果" class="headerlink" title="4.3.2实现类似:first-child的效果"></a>4.3.2实现类似:first-child的效果</h4><p><code>.cs-li + p&#123;color：#424242&#125;</code>  所有p元素都带cs-li属性，则只有第一个<code>&lt;p&gt;</code>中的文字没有颜色设置。</p><h4 id="4-3-3众多高级选择器技术的核心"><a href="#4-3-3众多高级选择器技术的核心" class="headerlink" title="4.3.3众多高级选择器技术的核心"></a>4.3.3众多高级选择器技术的核心</h4><p>配合伪类实现交互效果，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cs-tips&quot;</span>&gt;</span>不超过10个字符<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  .cs-tips&#123;</span><br><span class="line">color: gray;</span><br><span class="line">margin-left:15px;</span><br><span class="line">position: absolute;</span><br><span class="line">visibility: hidden;</span><br><span class="line">&#125;</span><br><span class="line">:focus + .cs-tips &#123;</span><br><span class="line">visibility: visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4随后兄弟选择符弯弯"><a href="#4-4随后兄弟选择符弯弯" class="headerlink" title="4.4随后兄弟选择符弯弯(~)"></a>4.4随后兄弟选择符弯弯(~)</h3><h4 id="4-4-1和相邻兄弟选择符区别"><a href="#4-4-1和相邻兄弟选择符区别" class="headerlink" title="4.4.1和相邻兄弟选择符区别"></a>4.4.1和相邻兄弟选择符区别</h4><p>随后兄弟选择符会匹配后面所有的兄弟元素。</p><h4 id="4-4-2为什么没有前面兄弟选择符"><a href="#4-4-2为什么没有前面兄弟选择符" class="headerlink" title="4.4.2为什么没有前面兄弟选择符"></a>4.4.2为什么没有前面兄弟选择符</h4><p>浏览器解析HTML是从前往后，从外往里进行。如果有前面兄弟选择符 ，网页呈现速度将大大减慢，浏览器会出现长时间的白板。</p><h4 id="4-4-3如何实现前面兄弟选择符的效果"><a href="#4-4-3如何实现前面兄弟选择符的效果" class="headerlink" title="4.4.3如何实现前面兄弟选择符的效果"></a>4.4.3如何实现前面兄弟选择符的效果</h4><p>设置位置，将后面兄弟的位置设置在前面兄弟的前面。</p><ol><li><p>flex布局实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;cs-flex&quot;&gt;</span><br><span class="line">&lt;input class=&quot;cs-input&quot;&gt;&lt;label class=&quot;cs-label&quot;&gt;用户名&lt;/label&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cs-flex</span>&#123;</span><br><span class="line"><span class="attribute">display</span>:inline-flex;</span><br><span class="line">   <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="selector-class">.cs-input</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.cs-label</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>:<span class="number">64px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-pseudo">:focus</span> ~ <span class="selector-class">.cs-label</span>&#123;</span><br><span class="line">       <span class="attribute">color</span>:darkblue;</span><br><span class="line">       <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>float浮动实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;cs-float&quot;&gt;</span><br><span class="line">&lt;input class=&quot;cs-input&quot;&gt;&lt;label class=&quot;cs-label&quot;&gt;用户名&lt;/label&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cs-float</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">264px</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="selector-class">.cs-input</span>&#123;</span><br><span class="line">        <span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.cs-label</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-pseudo">:focus</span> ~ <span class="selector-class">.cs-label</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:darkblue;</span><br><span class="line">        <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>;</span><br></pre></td></tr></table></figure></li><li><p>absolute绝对定位实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cs-absolute</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">264px</span>;</span><br><span class="line">   <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="selector-class">.cs-input</span>&#123;</span><br><span class="line">       <span class="attribute">margin-left</span>: <span class="number">64px</span>;</span><br><span class="line">       <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.cs-label</span>&#123;</span><br><span class="line">       <span class="attribute">position</span>:absolute;</span><br><span class="line">       <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-pseudo">:focus</span> ~ <span class="selector-class">.cs-label</span>&#123;</span><br><span class="line">       <span class="attribute">color</span>:darkblue;</span><br><span class="line">       <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">    &lt;div class=&quot;cs-absolute&quot;&gt;</span><br><span class="line">&lt;input class=&quot;cs-input&quot;&gt;&lt;label class=&quot;cs-label&quot;&gt;用户名&lt;/label&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>direction属性实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cs-direction</span>&#123;</span><br><span class="line"><span class="attribute">direction</span>: rtl;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="selector-class">.cs-direction</span> <span class="selector-class">.cs-label</span>,<span class="selector-class">.cs-direction</span> <span class="selector-class">.cs-input</span>&#123;</span><br><span class="line">       <span class="attribute">direction</span>: ltr;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.cs-label</span>&#123;</span><br><span class="line">       <span class="attribute">display</span>:inline-block;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-pseudo">:focus</span> ~ <span class="selector-class">.cs-label</span>&#123;</span><br><span class="line">       <span class="attribute">color</span>:darkblue;</span><br><span class="line">       <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;cs-direction&quot;&gt;</span><br><span class="line">&lt;input class=&quot;cs-input&quot;&gt;&lt;label class=&quot;cs-label&quot;&gt;用户名&lt;/label&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-5快速了解列选择符双管道"><a href="#4-5快速了解列选择符双管道" class="headerlink" title="4.5快速了解列选择符双管道(||)"></a>4.5快速了解列选择符双管道(||)</h3><h2 id="5-元素选择器"><a href="#5-元素选择器" class="headerlink" title="5 元素选择器"></a>5 元素选择器</h2><h3 id="5-1元素选择器的级联语法"><a href="#5-1元素选择器的级联语法" class="headerlink" title="5.1元素选择器的级联语法"></a>5.1元素选择器的级联语法</h3><p>元素选择器是唯一不能重复自身的选择器</p><p>级联使用时，元素选择器必须写在最前面。</p><h3 id="5-2标签选择器二三事"><a href="#5-2标签选择器二三事" class="headerlink" title="5.2标签选择器二三事"></a>5.2标签选择器二三事</h3><h4 id="5-2-1标签选择器混合其他选择器的优化"><a href="#5-2-1标签选择器混合其他选择器的优化" class="headerlink" title="5.2.1标签选择器混合其他选择器的优化"></a>5.2.1标签选择器混合其他选择器的优化</h4><h4 id="5-2-2标签选择器与自定义元素"><a href="#5-2-2标签选择器与自定义元素" class="headerlink" title="5.2.2标签选择器与自定义元素"></a>5.2.2标签选择器与自定义元素</h4><h3 id="5-3特殊的标签选择器-通配选择器"><a href="#5-3特殊的标签选择器-通配选择器" class="headerlink" title="5.3特殊的标签选择器:通配选择器"></a>5.3特殊的标签选择器:通配选择器</h3><h2 id="6-属性选择器"><a href="#6-属性选择器" class="headerlink" title="6 属性选择器"></a>6 属性选择器</h2><h3 id="6-1-ID选择器和类选择器"><a href="#6-1-ID选择器和类选择器" class="headerlink" title="6.1 ID选择器和类选择器"></a>6.1 ID选择器和类选择器</h3><ol><li><p>语法不同</p></li><li><p>优先级不同</p></li><li><p>唯一性与可重复性</p><p>类可以重复使用，但id选择器要使用需要写完所有的id</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=&quot;cs-button cs-button-primary&quot;&gt;main&lt;/button&gt;</span><br><span class="line"><span class="selector-id">#cs-button</span>\<span class="number">20</span>cs-<span class="selector-tag">button</span>-primary&#123;&#125;</span><br><span class="line"><span class="comment">/*或者*/</span></span><br><span class="line"><span class="selector-attr">[id~=<span class="string">&quot;cs-button&quot;</span>]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-2属性值直接匹配选择器"><a href="#6-2属性值直接匹配选择器" class="headerlink" title="6.2属性值直接匹配选择器"></a>6.2属性值直接匹配选择器</h3><ul><li>[attr]</li><li>[attr=”val”]</li><li>[attr~=”val”]</li><li>[attr|=”val”]</li></ul><h4 id="6-2-1详细了解4种选择器"><a href="#6-2-1详细了解4种选择器" class="headerlink" title="6.2.1详细了解4种选择器"></a>6.2.1详细了解4种选择器</h4><ul><li><p>[attr]</p><ul><li>只要包含了指定的属性就匹配，不关心属性的值</li></ul></li><li><p>[attr=”val”]</p><ul><li>属性值需要完全匹配</li><li>不区分单双引号</li><li>引号可以省略</li><li>属性值包含空格，则需要转义或者老老实实使用引号</li></ul></li><li><p>[attr~=”val”]</p><ul><li><p>属性值单词完全匹配选择器</p></li><li><p>属性值单词完全匹配选择器非常适合包含多种组合属性值的场景，例如，某元素共有9种 定位控制:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-align</span>=<span class="string">&quot;left top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-align</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-align</span>=<span class="string">&quot;right top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-align</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-align</span>=<span class="string">&quot;right bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-align</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-align</span>=<span class="string">&quot;left bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，最佳实践就是使用属性值单词完全匹配选择器:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[data-align]</span> &#123; <span class="attribute">left</span>: <span class="number">5</span>Ot;<span class="attribute">top</span>:<span class="number">508</span>;&#125;</span><br><span class="line"><span class="selector-attr">[data-align~=<span class="string">&quot;top&quot;</span>]</span> &#123; <span class="attribute">top</span>: O;&#125;</span><br><span class="line"><span class="selector-attr">[data-align~=<span class="string">&quot;right&quot;</span>]</span> &#123; <span class="attribute">right</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-attr">[data-align~=<span class="string">&quot;bottom&quot;</span>]</span> &#123; <span class="attribute">bottom</span>: O;&#125;</span><br><span class="line"><span class="selector-attr">[data-align~=<span class="string">&quot;left&quot;</span>]</span>&#123; <span class="attribute">left</span>:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>[attr|=”val”]</p><ul><li>属性值起止片段完全匹配选择器，属性的值要么是“val”,要么以”val”开头</li></ul></li></ul><h4 id="6-2-2AMCSS开发模式简介"><a href="#6-2-2AMCSS开发模式简介" class="headerlink" title="6.2.2AMCSS开发模式简介"></a>6.2.2AMCSS开发模式简介</h4><h3 id="6-3属性值正则匹配选择器"><a href="#6-3属性值正则匹配选择器" class="headerlink" title="6.3属性值正则匹配选择器"></a>6.3属性值正则匹配选择器</h3><ul><li>[attr^=”val”] 前匹配</li><li>[attr$=”val”] 后匹配</li><li>[attr*=”val”] 任意匹配</li></ul><h4 id="6-3-1详细了解3种选择器"><a href="#6-3-1详细了解3种选择器" class="headerlink" title="6.3.1详细了解3种选择器"></a>6.3.1详细了解3种选择器</h4><ul><li>[attr^=”val”] <ul><li>表示匹配attr属性值以字符val开头的元素</li><li>可以匹配中文，如果没有空格，则引号可以省略</li></ul></li><li>[attr$=”val”] 后匹配<ul><li>表示匹配attr属性值以字符val结尾的元素</li></ul></li><li>[attr*=”val”] 任意匹配<ul><li>表示匹配attr属性值包含字符val的元素</li></ul></li></ul><h4 id="6-3-2-CSS属性选择器搜索过滤技术"><a href="#6-3-2-CSS属性选择器搜索过滤技术" class="headerlink" title="6.3.2 CSS属性选择器搜索过滤技术"></a>6.3.2 CSS属性选择器搜索过滤技术</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入城市名称或拼音&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-search</span>=<span class="string">&quot;重庆市chongqing&quot;</span>&gt;</span>重庆市<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-search</span>=<span class="string">&quot;哈尔滨市haerbing&quot;</span>&gt;</span>哈尔滨市<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-search</span>=<span class="string">&quot;长春市changchun&quot;</span>&gt;</span>长春市<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//js</span><br><span class="line">var eleStyle = document.createElement(&#x27;style&#x27;);</span><br><span class="line">document.head.appendChild(eleStyle);</span><br><span class="line">// 文本框输入</span><br><span class="line">input.addEventListener(&quot;input&quot;, function() &#123;</span><br><span class="line">    var value = this.value.trim();</span><br><span class="line">    eleStyle.innerHTML = value ? &#x27;[data-search]:not([data-search*=&quot;&#x27;+ value +&#x27;&quot;]) &#123; display: none; &#125;&#x27; : &#x27;&#x27;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="6-4忽略属性值大小写的正则匹配运算符"><a href="#6-4忽略属性值大小写的正则匹配运算符" class="headerlink" title="6.4忽略属性值大小写的正则匹配运算符"></a>6.4忽略属性值大小写的正则匹配运算符</h3><p>使用字符i或I作为运算符，可以忽略属性值大小写。</p><h2 id="7-用户行为伪类"><a href="#7-用户行为伪类" class="headerlink" title="7 用户行为伪类"></a>7 用户行为伪类</h2><h3 id="7-1-手型经过伪类-hover"><a href="#7-1-手型经过伪类-hover" class="headerlink" title="7.1 手型经过伪类:hover"></a>7.1 手型经过伪类:hover</h3><ul><li>不适用于移动端</li><li>在桌面端很常用</li></ul><h4 id="7-1-1-体验优化与-hover延时"><a href="#7-1-1-体验优化与-hover延时" class="headerlink" title="7.1.1 体验优化与:hover延时"></a>7.1.1 体验优化与:hover延时</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">table</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">      &lt;th scope=&quot;col&quot;&gt;标题1&lt;/th&gt;</span><br><span class="line">      &lt;th scope=&quot;col&quot;&gt;标题2&lt;/th&gt;</span><br><span class="line">      &lt;th scope=&quot;col&quot; width=&quot;40&quot;&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">tr</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">td</span>&gt;内容<span class="number">1</span>&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">td</span>&gt;内容<span class="number">2</span>&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">      &lt;td&gt;&lt;a href class=&quot;icon-delete&quot; data-title=&quot;删除&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">tr</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">td</span>&gt;内容<span class="number">3</span>&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">td</span>&gt;内容<span class="number">4</span>&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line">      &lt;td&gt;&lt;a href class=&quot;icon-delete&quot; data-title=&quot;删除&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">tr</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">table</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-delete</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.icon-delete</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: visibility <span class="number">0s</span> .<span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon-delete</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.icon-delete</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-2-非子元素的-hover显示"><a href="#7-1-2-非子元素的-hover显示" class="headerlink" title="7.1.2 非子元素的:hover显示"></a>7.1.2 非子元素的:hover显示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> href&gt;图片链接&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">&lt;img src=&quot;1.jpg&quot;&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> + <span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>transition</code>对<code>display</code>无过渡效果，对<code>visibility</code>有过渡效果</p><h4 id="7-1-3-纯-hover显示浮层的体验问题"><a href="#7-1-3-纯-hover显示浮层的体验问题" class="headerlink" title="7.1.3 纯:hover显示浮层的体验问题"></a>7.1.3 纯:hover显示浮层的体验问题</h4><p>使用<code>:focus</code>避免用户没有鼠标，无法触发<code>:hover</code>的情况</p><h3 id="7-2激活状态伪类-active"><a href="#7-2激活状态伪类-active" class="headerlink" title="7.2激活状态伪类:active"></a>7.2激活状态伪类:active</h3><h4 id="7-2-1-active伪类概述"><a href="#7-2-1-active伪类概述" class="headerlink" title="7.2.1:active伪类概述"></a>7.2.1:active伪类概述</h4><h4 id="7-2-2按钮的通用-active样式技巧"><a href="#7-2-2按钮的通用-active样式技巧" class="headerlink" title="7.2.2按钮的通用:active样式技巧"></a>7.2.2按钮的通用:active样式技巧</h4><ul><li>适用于移动端开发<ul><li>使用<code>box-shadow</code>处理反馈</li><li>使用线性渐变<code>linear-gradient</code></li></ul></li></ul><h3 id="7-3焦点伪类-focus"><a href="#7-3焦点伪类-focus" class="headerlink" title="7.3焦点伪类:focus"></a>7.3焦点伪类:focus</h3><h4 id="7-3-1-focus伪类匹配机制"><a href="#7-3-1-focus伪类匹配机制" class="headerlink" title="7.3.1:focus伪类匹配机制"></a>7.3.1:focus伪类匹配机制</h4><p>只能匹配特定的元素，如</p><ul><li>非disable状态的表单元素，如<code>&lt;input&gt;</code>输入框，<code>&lt;select&gt;</code>下拉框，<code>&lt;button&gt;</code>按钮</li><li>包含<code>&lt;herf&gt;</code>的<code>&lt;a&gt;</code>元素</li><li><code>&lt;summary&gt;</code></li><li><code>&lt;area&gt;</code></li></ul><h4 id="7-3-2-focus伪类与outline"><a href="#7-3-2-focus伪类与outline" class="headerlink" title="7.3.2:focus伪类与outline"></a>7.3.2:focus伪类与outline</h4><p>设置<code>ontline:none</code>后，最好添加一个样式，如<code>border-color:HighLight</code>,防止用户使用键盘输入时没有响应。</p><h4 id="7-3-3-CSS-focus伪类与键盘无障碍访问"><a href="#7-3-3-CSS-focus伪类与键盘无障碍访问" class="headerlink" title="7.3.3 CSS:focus伪类与键盘无障碍访问"></a>7.3.3 CSS:focus伪类与键盘无障碍访问</h4><h3 id="7-4整体焦点伪类-focus-within"><a href="#7-4整体焦点伪类-focus-within" class="headerlink" title="7.4整体焦点伪类:focus-within"></a>7.4整体焦点伪类:focus-within</h3><h4 id="7-4-1-focus-within和-focus伪类的区别"><a href="#7-4-1-focus-within和-focus伪类的区别" class="headerlink" title="7.4.1 :focus-within和:focus伪类的区别"></a>7.4.1 :focus-within和:focus伪类的区别</h4><p>:focus：当前元素处于聚焦样式才会匹配</p><p> :focus-within：当前元素或任意子元素处于聚焦样式会匹配</p><h4 id="7-4-2-focus-within实现无障碍访问的下拉列表"><a href="#7-4-2-focus-within实现无障碍访问的下拉列表" class="headerlink" title="7.4.2 :focus-within实现无障碍访问的下拉列表"></a>7.4.2 :focus-within实现无障碍访问的下拉列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cs-bar&quot;</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cs-details&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cs-summary&quot;</span>&gt;</span>我的消息<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cs-datalist&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> <span class="attr">class</span>=<span class="string">&quot;cs-datalist-a&quot;</span>&gt;</span>我的回答<span class="tag">&lt;<span class="name">sup</span> <span class="attr">class</span>=<span class="string">&quot;cs-datalist-sup&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> <span class="attr">class</span>=<span class="string">&quot;cs-datalist-a&quot;</span>&gt;</span>我的私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> <span class="attr">class</span>=<span class="string">&quot;cs-datalist-a&quot;</span>&gt;</span>未评价订单<span class="tag">&lt;<span class="name">sup</span> <span class="attr">class</span>=<span class="string">&quot;cs-datalist-sup&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> <span class="attr">class</span>=<span class="string">&quot;cs-datalist-a&quot;</span>&gt;</span>我的关注<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.cs-bar &#123;</span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#e3e4e5</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#888</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding-left</span>: <span class="number">40px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.cs-details &#123;</span><br><span class="line"><span class="css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: left;</span></span><br><span class="line">&#125;</span><br><span class="line">.cs-summary &#123;</span><br><span class="line"><span class="css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">28px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-indent</span>: -<span class="number">15px</span>;</span></span><br><span class="line"><span class="css">    user-select: none;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.cs-summary</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">12px</span>; <span class="attribute">height</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span> .<span class="number">5ch</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./icon-arrow.svg</span>) no-repeat;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">transition</span>: transform .<span class="number">2s</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.cs-details</span><span class="selector-pseudo">:focus</span>-within <span class="selector-class">.cs-summary</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.cs-summary</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">box-shadow</span>: inset <span class="number">1px</span> <span class="number">0</span> <span class="number">#ddd</span>, inset -<span class="number">1px</span> <span class="number">0</span> <span class="number">#ddd</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.cs-details</span><span class="selector-pseudo">:focus</span>-within <span class="selector-class">.cs-summary</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span></span><br><span class="line">&#125;</span><br><span class="line">.cs-datalist &#123;</span><br><span class="line"><span class="css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">min-width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.cs-details</span><span class="selector-pseudo">:focus</span>-within <span class="selector-class">.cs-datalist</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: block;</span></span><br><span class="line">&#125;</span><br><span class="line">.cs-datalist-a &#123;</span><br><span class="line"><span class="css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">transition</span>: background-color .<span class="number">2s</span>, color .<span class="number">2s</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: inherit;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.cs-datalist-a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.cs-datalist-a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#555</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.cs-datalist-sup &#123;</span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: <span class="number">#cd0000</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: -.<span class="number">25em</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-left</span>: <span class="number">2px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-5键盘焦点伪类-focus-visible"><a href="#7-5键盘焦点伪类-focus-visible" class="headerlink" title="7.5键盘焦点伪类:focus-visible"></a>7.5键盘焦点伪类:focus-visible</h3><p>鼠标访问时不会有焦点轮廓，但键盘tab键访问时会有。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.cs-button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: teal;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">75em</span> <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus-better</span> <span class="selector-pseudo">:focus</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:focus</span>-visible) &#123;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">h4</span>&gt;原始状态（点击访问）&lt;/<span class="selector-tag">h4</span>&gt;</span><br><span class="line">&lt;ol class=&quot;demical&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;button class=&quot;cs-button&quot;&gt;按钮&lt;/button&gt;&lt;/li&gt;</span><br><span class="line">    &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">details</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">summary</span>&gt;<span class="selector-tag">summary</span>元素&lt;/<span class="selector-tag">summary</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">p</span>&gt;Chrome浏览器下点击会出现焦点轮廓。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">details</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;div tabindex=&quot;0&quot;&gt;我是设置了&lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt;的普通div元素。&lt;/div&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ol</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">h4</span>&gt;<span class="selector-pseudo">:focus</span>-visible优化后（Tab键访问）&lt;/<span class="selector-tag">h4</span>&gt;</span><br><span class="line">&lt;ol class=&quot;demical focus-better&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;button class=&quot;cs-button&quot;&gt;按钮&lt;/button&gt;&lt;/li&gt;</span><br><span class="line">    &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">details</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">summary</span>&gt;<span class="selector-tag">summary</span>元素&lt;/<span class="selector-tag">summary</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">p</span>&gt;Chrome浏览器下点击不会出现焦点轮廓。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">details</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;div tabindex=&quot;0&quot;&gt;我是设置了&lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt;的普通div元素。&lt;/div&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ol</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-URL定位伪类"><a href="#8-URL定位伪类" class="headerlink" title="8 URL定位伪类"></a>8 URL定位伪类</h2><h3 id="8-1链接历史伪类-link和-visited"><a href="#8-1链接历史伪类-link和-visited" class="headerlink" title="8.1链接历史伪类:link和:visited"></a>8.1链接历史伪类:link和:visited</h3><h4 id="8-1-1深入理解-link"><a href="#8-1-1深入理解-link" class="headerlink" title="8.1.1深入理解:link"></a>8.1.1深入理解:link</h4><p>:link匹配页面上链接没有访问过的<code>&lt;a&gt;</code>元素</p><h4 id="8-1-2-怪癖最多的CSS伪类-visited"><a href="#8-1-2-怪癖最多的CSS伪类-visited" class="headerlink" title="8.1.2 怪癖最多的CSS伪类:visited"></a>8.1.2 怪癖最多的CSS伪类:visited</h4><ul><li><p>支持的CSS属性有限</p></li><li><p>支持子选择器</p></li><li><p>没有半透明</p></li><li><p>只能重置，不能凭空设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/*不会出现背景色*/</span><br><span class="line">a&#123;color:blue&#125;</span><br><span class="line">a:visited&#123;color:red;background:grey&#125;</span><br><span class="line">/*会出现背景色*/</span><br><span class="line">a&#123;color:blue;background:write&#125;</span><br><span class="line">a:visited&#123;color:red;background:grey&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>无法获取：visited的设置和呈现的色值</p></li></ul><h3 id="8-2超链接伪类-any-link"><a href="#8-2超链接伪类-any-link" class="headerlink" title="8.2超链接伪类:any-link"></a>8.2超链接伪类:any-link</h3><ul><li>匹配所有设置了href的链接元素</li><li>匹配所有匹配<code>:link</code>  <code>:visited</code> 的元素</li></ul><h3 id="8-3目标伪类-target"><a href="#8-3目标伪类-target" class="headerlink" title="8.3目标伪类:target"></a>8.3目标伪类:target</h3><h4 id="8-3-1-target与锚点"><a href="#8-3-1-target与锚点" class="headerlink" title="8.3.1:target与锚点"></a>8.3.1:target与锚点</h4><h4 id="8-3-2-target交互布局技术简介"><a href="#8-3-2-target交互布局技术简介" class="headerlink" title="8.3.2:target交互布局技术简介"></a>8.3.2:target交互布局技术简介</h4><h3 id="8-4目标容器伪类-target-within"><a href="#8-4目标容器伪类-target-within" class="headerlink" title="8.4目标容器伪类:target-within"></a>8.4目标容器伪类:target-within</h3><h2 id="9-输入伪类"><a href="#9-输入伪类" class="headerlink" title="9 输入伪类"></a>9 输入伪类</h2><h3 id="9-1输入控件状态"><a href="#9-1输入控件状态" class="headerlink" title="9.1输入控件状态"></a>9.1输入控件状态</h3><h4 id="9-1-1可用状态与禁用状态伪类-enabled和-disabled"><a href="#9-1-1可用状态与禁用状态伪类-enabled和-disabled" class="headerlink" title="9.1.1可用状态与禁用状态伪类:enabled和:disabled"></a>9.1.1可用状态与禁用状态伪类:enabled和:disabled</h4><h4 id="9-1-2读写特性伪类-read-only和-read-write"><a href="#9-1-2读写特性伪类-read-only和-read-write" class="headerlink" title="9.1.2读写特性伪类:read-only和:read-write"></a>9.1.2读写特性伪类:read-only和:read-write</h4><h4 id="9-1-3占位符显示伪类-placeholder-shown"><a href="#9-1-3占位符显示伪类-placeholder-shown" class="headerlink" title="9.1.3占位符显示伪类:placeholder-shown"></a>9.1.3占位符显示伪类:placeholder-shown</h4><h4 id="9-1-4默认选项伪类-default"><a href="#9-1-4默认选项伪类-default" class="headerlink" title="9.1.4默认选项伪类:default"></a>9.1.4默认选项伪类:default</h4><h3 id="9-2-输入值状态"><a href="#9-2-输入值状态" class="headerlink" title="9.2 输入值状态"></a>9.2 输入值状态</h3><p>与单选框和复选框相关：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;radio&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="9-2-1选中选项伪类-checked"><a href="#9-2-1选中选项伪类-checked" class="headerlink" title="9.2.1选中选项伪类:checked"></a>9.2.1选中选项伪类:checked</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input:checked&#123;</span><br><span class="line"><span class="comment">//定义样式</span></span><br><span class="line">box-shadow:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span>px red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox &quot;</span> checked&gt;</span><br></pre></td></tr></table></figure><p>相当于</p><p><code>input[checked]&#123;box-shadow:0 0 0 2px red;&#125;</code></p><h4 id="9-2-2不确定值伪类-indeterminate"><a href="#9-2-2不确定值伪类-indeterminate" class="headerlink" title="9.2.2不确定值伪类:indeterminate"></a>9.2.2不确定值伪类:indeterminate</h4><p><a href="https://demo.cssworld.cn/selector/9/2-6.php">复选框半选示例</a></p><p><a href="https://demo.cssworld.cn/selector/9/2-7.php">复选框提示未选择示例</a></p><h3 id="9-3输入值验证"><a href="#9-3输入值验证" class="headerlink" title="9.3输入值验证"></a>9.3输入值验证</h3><h4 id="9-3-1有效性验证伪类-valid和-invalid"><a href="#9-3-1有效性验证伪类-valid和-invalid" class="headerlink" title="9.3.1有效性验证伪类:valid和:invalid"></a>9.3.1有效性验证伪类:valid和:invalid</h4><h4 id="9-3-2-范围验证伪类-in-range-和-out-of-range"><a href="#9-3-2-范围验证伪类-in-range-和-out-of-range" class="headerlink" title="9.3.2 范围验证伪类:in-range 和:out-of-range"></a>9.3.2 范围验证伪类:in-range 和:out-of-range</h4><h4 id="9-3-3可选性伪类-required和-optional"><a href="#9-3-3可选性伪类-required和-optional" class="headerlink" title="9.3.3可选性伪类:required和:optional"></a>9.3.3可选性伪类:required和:optional</h4><h4 id="9-3-4用户交互伪类-user-invalid和空值伪类-blank"><a href="#9-3-4用户交互伪类-user-invalid和空值伪类-blank" class="headerlink" title="9.3.4用户交互伪类:user-invalid和空值伪类:blank"></a>9.3.4用户交互伪类:user-invalid和空值伪类:blank</h4><h2 id="10-树结构伪类"><a href="#10-树结构伪类" class="headerlink" title="10 树结构伪类"></a>10 树结构伪类</h2><h3 id="10-1-root伪类"><a href="#10-1-root伪类" class="headerlink" title="10.1:root伪类"></a>10.1:root伪类</h3><h4 id="10-1-1-root伪类和-lt-html-gt-元素"><a href="#10-1-1-root伪类和-lt-html-gt-元素" class="headerlink" title="10.1.1:root伪类和&lt;html&gt;元素"></a>10.1.1:root伪类和<code>&lt;html&gt;</code>元素</h4><p>root伪类表示文档根元素</p><h4 id="10-1-2-root伪类的应用场景"><a href="#10-1-2-root伪类的应用场景" class="headerlink" title="10.1.2:root伪类的应用场景"></a>10.1.2:root伪类的应用场景</h4><ul><li><p>滚动条出现时页面不跳动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*IE 8*/</span></span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line"><span class="attribute">overflow-y</span>:scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*IE 9+*/</span></span><br><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line"><span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:root</span> <span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">position</span> :absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line"><span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义CSS变量</p></li></ul><h3 id="10-2-empty伪类"><a href="#10-2-empty伪类" class="headerlink" title="10.2:empty伪类"></a>10.2:empty伪类</h3><p>匹配空标签元素</p><p>匹配前后闭合的替换元素</p><p>匹配非闭合元素</p><h4 id="10-2-1对-empty伪类可能的误解"><a href="#10-2-1对-empty伪类可能的误解" class="headerlink" title="10.2.1对:empty伪类可能的误解"></a>10.2.1对:empty伪类可能的误解</h4><ul><li>元素内有注释则不匹配</li><li>元素内有空格或标签或换行则不匹配</li><li>元素内有注释则不匹配</li></ul><h4 id="10-2-2超实用超高频使用的-empty伪类"><a href="#10-2-2超实用超高频使用的-empty伪类" class="headerlink" title="10.2.2超实用超高频使用的:empty伪类"></a>10.2.2超实用超高频使用的:empty伪类</h4><ul><li>字段缺失智能提示</li></ul><h3 id="10-3-子索引伪类"><a href="#10-3-子索引伪类" class="headerlink" title="10.3 子索引伪类"></a>10.3 子索引伪类</h3><h4 id="10-3-1-first-child伪类和-last-child伪类"><a href="#10-3-1-first-child伪类和-last-child伪类" class="headerlink" title="10.3.1 :first-child伪类和:last-child伪类"></a>10.3.1 :first-child伪类和:last-child伪类</h4><p><code>:first-child</code>伪类匹配第一个子元素</p><p><code>:last-child</code>伪类匹配最后一个子元素</p><h4 id="10-3-2-only-child伪类"><a href="#10-3-2-only-child伪类" class="headerlink" title="10.3.2 :only-child伪类"></a>10.3.2 :only-child伪类</h4><p>匹配没有任何兄弟的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 只有加载图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cs-loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cs-loading-img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 只有加载文字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cs-loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;cs-loading-p&quot;</span>&gt;</span>正在加载中...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3. 加载图片和加载文字同时存在 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cs-loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./loading.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cs-loading-img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;cs-loading-p&quot;</span>&gt;</span>正在加载中...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.cs-loading &#123;</span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 与截图无关，截图示意用 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">1px</span> dotted;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="comment">/* 图片和文字同时存在时在中间留点间距 */</span></span></span><br><span class="line">.cs-loading-img &#123;</span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">vertical-align</span>: bottom;</span></span><br><span class="line">&#125;</span><br><span class="line">.cs-loading-p &#123;</span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: .<span class="number">5em</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: gray;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="comment">/* 只有图片的时候居中绝对定位 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.cs-loading-img</span><span class="selector-pseudo">:only-child</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: auto;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="comment">/* 只有文字的时候行号近似垂直居中 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.cs-loading-p</span><span class="selector-pseudo">:only-child</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">line-height</span>: <span class="number">150px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-3-3-nth-child-伪类和-nth-last-child-伪类"><a href="#10-3-3-nth-child-伪类和-nth-last-child-伪类" class="headerlink" title="10.3.3 :nth-child()伪类和:nth-last-child()伪类"></a>10.3.3 :nth-child()伪类和:nth-last-child()伪类</h4><p> :nth-child()伪类 从前面开始匹配</p><p>:nth-last-child()伪类   从后面开始匹配</p><p>下面来看一些示例，快速了解一下各种类型的参数的含义。<br><code>tr:nth-child(odd)</code>:匹配表格的第1,3,5行，等同于<code>tr:nth-child(2n+1)</code>。</p><p><code> tr:nth-child (even)</code>:匹配表格的第2,4,6行，等同于<code>tr:nth-child(2n)</code>。 </p><p><code>:nth-child(3)</code>:匹配第3个元素。<br><code>:nth-child(5n)</code>:匹配第5,10,15,..个元素。其中5=5x1，10=5x2，15=5x3</p><p> <code>:nth-child(3n+4)</code>:匹配第4,7，10,.个元素。其中4=(3x0)+4，7=(3x1)+4， 10=(3x2)+4..</p><p><code>:nth-child(-n+3):</code>匹配前3个元素。因为-0+3=3，-1+3=2，-2+3-1.</p><p><code>li:nth-child(n):</code>匹配所有的&lt;1i&gt;元素，就匹配的元素而言和li标签选择器一 模一样，区别就是优先级更高了。实际开发总是避免过高的优先级，因此没有任何理 由这么使用。<br><code>li:nth-child(1):</code>匹配第一个<li>元素，和<code>li:first-child</code>匹配的作用一样， 区别就是后者的兼容性更好，因此，也没有任何这么使用的理由，使用<code>:first-child </code>代替它。<br><code>li:nth-child(n+4):nth-child(-n+10):</code>匹配第4~10个<code>&lt;li&gt;</code>元素，这个就 属于比较高级的用法了。例如，考试成绩是前3名的有徽章，第4名到第10名高亮显 示，此时，这种正负值组合的伪类就非常好用。</li></p><h3 id="10-4匹配类型的子索引伪类"><a href="#10-4匹配类型的子索引伪类" class="headerlink" title="10.4匹配类型的子索引伪类"></a>10.4匹配类型的子索引伪类</h3><h4 id="10-4-1-first-of-type伪类和-last-of-type伪类"><a href="#10-4-1-first-of-type伪类和-last-of-type伪类" class="headerlink" title="10.4.1 :first-of-type伪类和:last-of-type伪类"></a>10.4.1 :first-of-type伪类和:last-of-type伪类</h4><p> :first-of-type 匹配当前标签类型元素的第一个</p><p>:last-of-type伪类 匹配当前标签类型元素的最后一个</p><h4 id="10-4-2-only-of-type伪类"><a href="#10-4-2-only-of-type伪类" class="headerlink" title="10.4.2 :only-of-type伪类"></a>10.4.2 :only-of-type伪类</h4><p> :only-of-type伪类 匹配唯一的标签类型元素</p><h4 id="10-4-3-nth-of-type-伪类和-nth-last-of-type-伪类"><a href="#10-4-3-nth-of-type-伪类和-nth-last-of-type-伪类" class="headerlink" title="10.4.3 :nth-of-type()伪类和:nth-last-of-type()伪类"></a>10.4.3 :nth-of-type()伪类和:nth-last-of-type()伪类</h4><p> :nth-of-type()伪类  匹配指定索引的当前标签元素</p><h2 id="11-逻辑组合伪类"><a href="#11-逻辑组合伪类" class="headerlink" title="11 逻辑组合伪类"></a>11 逻辑组合伪类</h2><h3 id="11-1否定伪类-not"><a href="#11-1否定伪类-not" class="headerlink" title="11.1否定伪类:not()"></a>11.1否定伪类:not()</h3><p>匹配与括号内的选择器匹配不上的元素，如</p><p><code>:not(p)</code> 匹配不是<code>&lt;p&gt;</code>的元素</p><p>可以不断级联，如<code>input:not(disable):not(read-only)&#123;&#125;</code></p><h3 id="11-2了解任意匹配伪类-is"><a href="#11-2了解任意匹配伪类-is" class="headerlink" title="11.2了解任意匹配伪类:is()"></a>11.2了解任意匹配伪类:is()</h3><h4 id="11-2-1-is-伪类与-matches-伪类及-any-伪类之间的关系"><a href="#11-2-1-is-伪类与-matches-伪类及-any-伪类之间的关系" class="headerlink" title="11.2.1 :is()伪类与:matches()伪类及:any()伪类之间的关系"></a>11.2.1 :is()伪类与:matches()伪类及:any()伪类之间的关系</h4><h4 id="11-2-2-is-伪类的语法与作用"><a href="#11-2-2-is-伪类的语法与作用" class="headerlink" title="11.2.2 :is()伪类的语法与作用"></a>11.2.2 :is()伪类的语法与作用</h4><h3 id="11-3了解任意匹配伪类-where"><a href="#11-3了解任意匹配伪类-where" class="headerlink" title="11.3了解任意匹配伪类:where()"></a>11.3了解任意匹配伪类:where()</h3><h3 id="11-4了解关联伪类-has"><a href="#11-4了解关联伪类-has" class="headerlink" title="11.4了解关联伪类:has()"></a>11.4了解关联伪类:has()</h3><h2 id="12-其他伪类选择器"><a href="#12-其他伪类选择器" class="headerlink" title="12 其他伪类选择器"></a>12 其他伪类选择器</h2><h3 id="12-1与作用域相关的伪类"><a href="#12-1与作用域相关的伪类" class="headerlink" title="12.1与作用域相关的伪类"></a>12.1与作用域相关的伪类</h3><h4 id="12-1-1参考元素伪类-scope"><a href="#12-1-1参考元素伪类-scope" class="headerlink" title="12.1.1参考元素伪类:scope"></a>12.1.1参考元素伪类:scope</h4><h4 id="12-1-2-Shadow树根元素伪类-host"><a href="#12-1-2-Shadow树根元素伪类-host" class="headerlink" title="12.1.2 Shadow树根元素伪类:host"></a>12.1.2 Shadow树根元素伪类:host</h4><h4 id="12-1-3-Shadow树根元素匹配伪类-host"><a href="#12-1-3-Shadow树根元素匹配伪类-host" class="headerlink" title="12.1.3 Shadow树根元素匹配伪类:host()"></a>12.1.3 Shadow树根元素匹配伪类:host()</h4><h4 id="12-1-4-Shadow树根元素上下文匹配伪类-host-context"><a href="#12-1-4-Shadow树根元素上下文匹配伪类-host-context" class="headerlink" title="12.1.4 Shadow树根元素上下文匹配伪类:host-context()."></a>12.1.4 Shadow树根元素上下文匹配伪类:host-context().</h4><h3 id="12-2与全屏相关的伪类-fullscreen"><a href="#12-2与全屏相关的伪类-fullscreen" class="headerlink" title="12.2与全屏相关的伪类 :fullscreen"></a>12.2与全屏相关的伪类 :fullscreen</h3><h3 id="12-3-了解语言相关伪类"><a href="#12-3-了解语言相关伪类" class="headerlink" title="12.3 了解语言相关伪类"></a>12.3 了解语言相关伪类</h3><h4 id="12-3-1-方向伪类-dir"><a href="#12-3-1-方向伪类-dir" class="headerlink" title="12.3.1 方向伪类:dir()"></a>12.3.1 方向伪类:dir()</h4><h4 id="12-3-2-语言伪类-lang"><a href="#12-3-2-语言伪类-lang" class="headerlink" title="12.3.2 语言伪类:lang()"></a>12.3.2 语言伪类:lang()</h4><h3 id="12-4-了解资源状态伪类"><a href="#12-4-了解资源状态伪类" class="headerlink" title="12.4 了解资源状态伪类"></a>12.4 了解资源状态伪类</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h2&gt;&lt;h3 id=&quot;1-1为什么CSS选择器很强&quot;&gt;&lt;a href=&quot;#1-1为什么CSS选择器很强&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="读书笔记" scheme="http://example.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2021/02/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2021/02/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-02-02T09:14:53.000Z</published>
    <updated>2021-03-15T12:57:41.561Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://regexr.com/">正则表达式网址https://regexr.com</a></p><h2 id="1-匹配任意字符"><a href="#1-匹配任意字符" class="headerlink" title="1. 匹配任意字符"></a>1. 匹配任意字符</h2><p>基本格式<code>([A-Z])\w+</code></p><p>匹配随意一个字符串<code>str</code></p><p>匹配“王XX”<code>王..</code> </p><p> <code>.</code>：匹配除断行外任意一个字符，<code>\.</code>匹配“.”这一个字符</p><p> 转义符<code>\</code></p><h2 id="2-匹配字母和数字"><a href="#2-匹配字母和数字" class="headerlink" title="2. 匹配字母和数字"></a>2. 匹配字母和数字</h2><p><code>\w</code>：匹配字母、数字、下划线</p><p><code>\W</code>：匹配被<code>\w</code>排除的东西（<code>\w</code>的补集）</p><h2 id="3-匹配数字"><a href="#3-匹配数字" class="headerlink" title="3. 匹配数字"></a>3. 匹配数字</h2><p><code>\d</code>：匹配阿拉伯数字</p><p><code>\D</code>: 匹配非阿拉伯数字（<code>\d</code>的补集）</p><h2 id="4-匹配空白字符"><a href="#4-匹配空白字符" class="headerlink" title="4. 匹配空白字符"></a>4. 匹配空白字符</h2><p><code>\s</code>:匹配空白字符:空格、制表符、断行等</p><p><code>\S</code>(<code>\s</code>的补集）</p><h2 id="5-字符集合"><a href="#5-字符集合" class="headerlink" title="5. 字符集合"></a>5. 字符集合</h2><p><code>[abc]</code>只匹配abc这三个字符（不包含大写）</p><p><code>[a-z]</code> 匹配从a到z的字符</p><p>用Unicode匹配中文字符</p><p>（graphemica网站：输入Unicode字符显示中文字符）</p><p><code>[选择范围]  </code>匹配括号中的任意一个字符</p><h2 id="6-重复"><a href="#6-重复" class="headerlink" title="6. 重复"></a>6. 重复</h2><p><code>[范围]+</code>重复一次或多次<br>e.g: <code>[yY][oO]+</code>匹配yo,Yo,yooo,YO等字符串</p><p><code>[范围]*</code>重复零次或多次</p><p><code>[范围]？</code>重复零个或一个</p><h3 id="指定重复范围"><a href="#指定重复范围" class="headerlink" title="指定重复范围"></a>指定重复范围</h3><p><code>&#123;a,b&#125;</code>匹配重复范围在a到b次</p><p><code>&#123;a,b&#125;\b</code>只匹配重复范围在a到b次的字符串，超过的就不匹配了</p><p><code>\b</code>边界</p><p><code>&#123;a&#125;</code>匹配重复a次的字符串（不到a次的不会匹配到</p><p><code>&#123;a,&#125;</code>匹配重复范围为a次以上</p><h2 id="7-分组匹配"><a href="#7-分组匹配" class="headerlink" title="7. 分组匹配"></a>7. 分组匹配</h2><p><code>(.+)(.+)</code></p><p><code>$1</code>表示第一组，以此类推</p><h2 id><a href="#" class="headerlink" title></a></h2><p><code>abc$</code>匹配字母 abc 并以 abc 结尾，<code>$</code> 为匹配输入字符串的结束位置。</p><p><code>[^abc]</code>匹配除abc外的所有字符</p><p><code>[\s\S]</code><br>匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，包括换行。</p><h2 id="特别字符"><a href="#特别字符" class="headerlink" title="特别字符"></a>特别字符</h2><table><thead><tr><th>$</th><th>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</th></tr></thead><tbody><tr><td>( )</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td>.</td><td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td>[</td><td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td>\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td>{</td><td>标记限定符表达式的开始。要匹配 {，请使用 {。</td></tr><tr><td>|</td><td>指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">ignore - 不区分大小写</td><td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="left">g</td><td align="left">global - 全局匹配</td><td align="left">查找所有的匹配项。</td></tr><tr><td align="left">m</td><td align="left">multi line - 多行匹配</td><td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td align="left">s</td><td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td align="left">默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str&#x3D;&quot;Google runoob taobao runoob&quot;; </span><br><span class="line">var n1&#x3D;str.match(&#x2F;runoob&#x2F;);   &#x2F;&#x2F; 查找第一次匹配项</span><br><span class="line">var n2&#x3D;str.match(&#x2F;runoob&#x2F;g);  &#x2F;&#x2F; 查找所有匹配项</span><br><span class="line">var n2&#x3D;str.match(&#x2F;runoob&#x2F;gi);  &#x2F;&#x2F; 不区分大小写</span><br><span class="line">var n2&#x3D;str.match(&#x2F;^runoob&#x2F;gm);  &#x2F;&#x2F; 多行匹配</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><table><thead><tr><th align="left">正则表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">/\b([a-z]+) \1\b/gi</td><td align="left">一个单词连续出现的位置。</td></tr><tr><td align="left">/(\w+)://([^/:]+)(:\d*)?([^# ]*)/</td><td align="left">将一个URL解析为协议、域、端口及相对路径。</td></tr><tr><td align="left">/^(?:Chapter|Section) [1-9][0-9]{0,1}$/</td><td align="left">定位章节的位置。</td></tr><tr><td align="left">/[-a-z]/</td><td align="left">a至z共26个字母再加一个-号。</td></tr><tr><td align="left">/ter\b/</td><td align="left">可匹配chapter，而不能匹配terminal。</td></tr><tr><td align="left">/\Bapt/</td><td align="left">可匹配chapter，而不能匹配aptitude。</td></tr><tr><td align="left">/Windows(?=95 |98 |NT )/</td><td align="left">可匹配Windows95或Windows98或WindowsNT，当找到一个匹配后，从Windows后面开始进行下一次的检索匹配。</td></tr><tr><td align="left">/^\s*$/</td><td align="left">匹配空行。</td></tr><tr><td align="left">/\d{2}-\d{5}/</td><td align="left">验证由两位数字、一个连字符再加 5 位数字组成的 ID 号。</td></tr><tr><td align="left">/&lt;\s*(\S+)(\s[^&gt;]<em>)?&gt;[\s\S]</em>&lt;\s*/\1\s*&gt;/</td><td align="left">匹配 HTML 标记。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://regexr.com/&quot;&gt;正则表达式网址https://regexr.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-匹配任意字符&quot;&gt;&lt;a href=&quot;#1-匹配任意字符&quot; class=&quot;headerlink&quot; title=&quot;1. 匹配任意字符</summary>
      
    
    
    
    <category term="学习日记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="正则表达式" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>VueStudy</title>
    <link href="http://example.com/2021/02/02/VueStudy/"/>
    <id>http://example.com/2021/02/02/VueStudy/</id>
    <published>2021-02-02T08:23:13.000Z</published>
    <updated>2021-03-24T07:36:32.796Z</updated>
    
    <content type="html"><![CDATA[<p>vue.js</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://cn.vuejs.org/">vue官方文档</a></p><p>vue是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以<strong>自底向上逐层应用</strong>。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code></p><p><code>vue-cli</code> 工程化构建</p><p>Vue.js 的核心是一个允许采用简洁的<strong>模板语法来声明式地将数据渲染进 DOM 的系统</strong></p><p>所有东西都是<strong>响应式的</strong>。可以实时修改并更新</p><h3 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h3><ul><li><p><code>v-if=&quot;seen&quot;</code>控制一个元素是否显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app-3&quot;</span>&gt;</span><br><span class="line">  &lt;p v-<span class="keyword">if</span>=<span class="string">&quot;seen&quot;</span>&gt;现在你看到我了&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-3&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    seen: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM <strong>结构</strong></p></li><li><p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app-4&quot;</span>&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-4&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 JavaScript&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;整个牛项目&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>v-on</code> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-5&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;reverseMessage&quot;&gt;反转消息&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app5 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-5&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;Hello Vue.js!&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseMessage: function () &#123;</span><br><span class="line">      this.message &#x3D; this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app-6&quot;</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;input v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-6&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>….</p></li></ul><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义名为 todo-item 的新组件</span><br><span class="line">Vue.component(&#39;todo-item&#39;, &#123;</span><br><span class="line">  template: &#39;&lt;li&gt;这是个待办项&lt;&#x2F;li&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app &#x3D; new Vue(...)</span><br><span class="line">现在你可以用它构建另一个组件模板：</span><br><span class="line"></span><br><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span><br><span class="line">  &lt;todo-item&gt;&lt;&#x2F;todo-item&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure><ul><li><p>prop——从父作用域将数据传到子组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;todo-item&#39;, &#123;</span><br><span class="line">  &#x2F;&#x2F; todo-item 组件现在接受一个</span><br><span class="line">  &#x2F;&#x2F; &quot;prop&quot;，类似于一个自定义 attribute。</span><br><span class="line">  &#x2F;&#x2F; 这个 prop 名为 todo。</span><br><span class="line">  props: [&#39;todo&#39;],</span><br><span class="line">  template: &#39;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>v-bind</code> 指令将待办项传到循环输出的每个组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app-7&quot;</span>&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      现在我们为每个 todo-item 提供 todo 对象</span><br><span class="line">      todo 对象是变量，即其内容可以是动态的。</span><br><span class="line">      我们也需要为每个组件提供一个“key”，稍后再</span><br><span class="line">      作详细解释。</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;todo-item</span><br><span class="line">      v-<span class="keyword">for</span>=<span class="string">&quot;item in groceryList&quot;</span></span><br><span class="line">      v-bind:todo=<span class="string">&quot;item&quot;</span></span><br><span class="line">      v-bind:key=<span class="string">&quot;item.id&quot;</span></span><br><span class="line">    &gt;&lt;/todo-item&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app7 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-7&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    groceryList: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">&#x27;蔬菜&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;奶酪&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;随便其它什么人吃的东西&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h3><ul><li><p>只有当实例被创建时就已经存在于 <code>data</code> 中的 property 才是<strong>响应式</strong>的。</p></li><li><p>使用 <code>Object.freeze()</code>，这会阻止修改现有的 property，也意味着响应系统无法再<em>追踪</em>变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: obj</span><br><span class="line">&#125;)</span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;!-- 这里的 <span class="string">`foo`</span> 不会更新！ --&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">&quot;foo = &#x27;baz&#x27;&quot;</span>&gt;Change it&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>…</p></li></ul><h3 id="实例生命周期钩子"><a href="#实例生命周期钩子" class="headerlink" title="实例生命周期钩子"></a>实例生命周期钩子</h3><p><img src="/.com//download\vue-lifecycle.png" alt="vue-lifecycle"></p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者<strong>声明式地将 DOM 绑定至底层 Vue 实例的数据。</strong>所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。</p><p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><ul><li>文本-数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：<code>&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</code></li><li>使用 <a href="https://cn.vuejs.org/v2/api/#v-once">v-once 指令</a>，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：<code>&lt;span v-once&gt;这个将不会改变: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</code></li><li><code>v-html</code>输出真正的HTML<ul><li>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。请只对可信内容使用 HTML 插值，<strong>绝不要</strong>对用户提供的内容使用插值。</li></ul></li><li><code>v-bind</code> 绑定属性  <code>&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</code></li><li>双括号还可以使用JavaScript表达式</li></ul><h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><p>板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;example&quot;&gt;</span><br><span class="line">  &#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>在这个地方，模板不再是简单的声明式逻辑。你必须看一段时间才能意识到，这里是想要显示变量 <code>message</code> 的翻转字符串。想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p><p>所以，对于任何复杂逻辑，都应当使用<strong>计算属性</strong>。</p><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  now: function () &#123;</span><br><span class="line">    return Date.now()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p><p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p><h3 id="计算属性-VS-侦听属性"><a href="#计算属性-VS-侦听属性" class="headerlink" title="计算属性 VS 侦听属性"></a>计算属性 VS 侦听属性</h3><h2 id="class与style绑定"><a href="#class与style绑定" class="headerlink" title="class与style绑定"></a>class与style绑定</h2><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是 attribute，所以我们可以用 <code>v-bind</code> 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h3 id="不推荐同时使用-v-if-和-v-for"><a href="#不推荐同时使用-v-if-和-v-for" class="headerlink" title="不推荐同时使用 v-if 和 v-for"></a><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></h3><p>当它们处于同一节点，<code>v-for</code> 的优先级比 <code>v-if</code> 更高，这意味着 <code>v-if</code> 将分别重复运行于每个 <code>v-for</code> 循环中。当你只想为<em>部分</em>项渲染节点时，这种<strong>优先级的机制</strong>会十分有用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for&#x3D;&quot;todo in todos&quot; v-if&#x3D;&quot;!todo.isComplete&quot;&gt;</span><br><span class="line">  &#123;&#123; todo &#125;&#125;</span><br><span class="line">&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure><p>上面的代码将只渲染未完成的 todo。</p><p>而如果你的目的是有条件地跳过循环的执行，那么可以将 <code>v-if</code> 置于外层元素 (或 [`) 上。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul v-if&#x3D;&quot;todos.length&quot;&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;todo in todos&quot;&gt;</span><br><span class="line">    &#123;&#123; todo &#125;&#125;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;p v-else&gt;No todos left!&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%BF%85%E8%A6%81">https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%BF%85%E8%A6%81</a></p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p><p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p><p>可以用 <code>v-for</code> 来遍历一个对象的 property。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id&#x3D;&quot;v-for-object&quot; class&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">  &lt;li v-for&#x3D;&quot;value in object&quot;&gt;</span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#v-for-object&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      title: &#39;How to do lists in Vue&#39;,</span><br><span class="line">      author: &#39;Jane Doe&#39;,</span><br><span class="line">      publishedAt: &#39;2016-04-10&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;example-1&quot;&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;Add 1&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;p&gt;The button above has been clicked &#123;&#123; counter &#125;&#125; times.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var example1 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#example-1&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    counter: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><p>Add 1</p><p>The button above has been clicked 0 times.</p><h3 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95">事件处理方法</a></h3><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;!-- &#96;greet&#96; 是在下面定义的方法名 --&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;greet&quot;&gt;Greet&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var example2 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#example-2&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: &#39;Vue.js&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 在 &#96;methods&#96; 对象中定义方法</span><br><span class="line">  methods: &#123;</span><br><span class="line">    greet: function (event) &#123;</span><br><span class="line">      &#x2F;&#x2F; &#96;this&#96; 在方法里指向当前 Vue 实例</span><br><span class="line">      alert(&#39;Hello &#39; + this.name + &#39;!&#39;)</span><br><span class="line">      &#x2F;&#x2F; &#96;event&#96; 是原生 DOM 事件</span><br><span class="line">      if (event) &#123;</span><br><span class="line">        alert(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 也可以用 JavaScript 直接调用方法</span><br><span class="line">example2.greet() &#x2F;&#x2F; &#x3D;&gt; &#39;Hello Vue.js!&#39;</span><br></pre></td></tr></table></figure><p>结果：</p><p>Greet</p><h3 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E5%86%85%E8%81%94%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95">内联处理器中的方法</a></h3><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;example-3&quot;&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;say(&#39;hi&#39;)&quot;&gt;Say hi&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;say(&#39;what&#39;)&quot;&gt;Say what&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#example-3&#39;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say: function (message) &#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><p>Say hi Say what</p><p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click&#x3D;&quot;warn(&#39;Form cannot be submitted yet.&#39;, $event)&quot;&gt;</span><br><span class="line">  Submit</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">methods: &#123;</span><br><span class="line">  warn: function (message, event) &#123;</span><br><span class="line">    &#x2F;&#x2F; 现在我们可以访问原生事件对象</span><br><span class="line">    if (event) &#123;</span><br><span class="line">      event.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">    alert(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">事件修饰符</a></h3><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&#x3D;&quot;onSubmit&quot;&gt;&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent&#x3D;&quot;doThat&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture&#x3D;&quot;doThis&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div v-on:click.self&#x3D;&quot;doThat&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p><blockquote><p>2.1.4 新增</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="line">&lt;a v-on:click.once&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>不像其它只能对原生的 DOM 事件起作用的修饰符，<code>.once</code> 修饰符还能被用到自定义的<a href="https://cn.vuejs.org/v2/guide/components-custom-events.html">组件事件</a>上。如果你还没有阅读关于组件的文档，现在大可不必担心。</p><blockquote><p>2.3.0 新增</p></blockquote><p>Vue 还对应 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters"><code>addEventListener</code> 中的 <code>passive</code> 选项</a>提供了 <code>.passive</code> 修饰符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span><br><span class="line">&lt;!-- 而不会等待 &#96;onScroll&#96; 完成  --&gt;</span><br><span class="line">&lt;!-- 这其中包含 &#96;event.preventDefault()&#96; 的情况 --&gt;</span><br><span class="line">&lt;div v-on:scroll.passive&#x3D;&quot;onScroll&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这个 <code>.passive</code> 修饰符尤其能够提升移动端的性能。</p><p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你<em>不</em>想阻止事件的默认行为。</p><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">按键修饰符</a></h3><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只有在 &#96;key&#96; 是 &#96;Enter&#96; 时调用 &#96;vm.submit()&#96; --&gt;</span><br><span class="line">&lt;input v-on:keyup.enter&#x3D;&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure><p>你可以直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup.page-down&#x3D;&quot;onPageDown&quot;&gt;</span><br></pre></td></tr></table></figure><p>在上述示例中，处理函数只会在 <code>$event.key</code> 等于 <code>PageDown</code> 时被调用。</p><h4 id="按键码"><a href="#按键码" class="headerlink" title="按键码"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E7%A0%81">按键码</a></h4><p><code>keyCode</code> 的事件用法<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">已经被废弃了</a>并可能不会被最新的浏览器支持。</p><p>使用 <code>keyCode</code> attribute 也是允许的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup.13&#x3D;&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure><p>为了在必要的情况下支持旧浏览器，Vue 提供了绝大多数常用的按键码的别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>有一些按键 (<code>.esc</code> 以及所有的方向键) 在 IE9 中有不同的 <code>key</code> 值, 如果你想支持 IE9，这些内置的别名应该是首选。</p><p>你还可以通过全局 <code>config.keyCodes</code> 对象<a href="https://cn.vuejs.org/v2/api/#keyCodes">自定义按键修饰符别名</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 可以使用 &#96;v-on:keyup.f1&#96;</span><br><span class="line">Vue.config.keyCodes.f1 &#x3D; 112</span><br></pre></td></tr></table></figure><h3 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E7%B3%BB%E7%BB%9F%E4%BF%AE%E9%A5%B0%E9%94%AE">系统修饰键</a></h3><blockquote><p>2.1.0 新增</p></blockquote><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><blockquote><p>注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta”。</p></blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Alt + C --&gt;</span><br><span class="line">&lt;input v-on:keyup.alt.67&#x3D;&quot;clear&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Ctrl + Click --&gt;</span><br><span class="line">&lt;div v-on:click.ctrl&#x3D;&quot;doSomething&quot;&gt;Do something&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>请注意修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode</code>：<code>keyup.17</code>。</p><h4 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#exact-%E4%BF%AE%E9%A5%B0%E7%AC%A6"><code>.exact</code> 修饰符</a></h4><blockquote><p>2.5.0 新增</p></blockquote><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><br><span class="line">&lt;button v-on:click.ctrl&#x3D;&quot;onClick&quot;&gt;A&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button v-on:click.ctrl.exact&#x3D;&quot;onCtrlClick&quot;&gt;A&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button v-on:click.exact&#x3D;&quot;onClick&quot;&gt;A&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h4 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E9%BC%A0%E6%A0%87%E6%8C%89%E9%92%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">鼠标按钮修饰符</a></h4><blockquote><p>2.2.0 新增</p></blockquote><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p><h3 id="为什么在-HTML-中监听事件？"><a href="#为什么在-HTML-中监听事件？" class="headerlink" title="为什么在 HTML 中监听事件？"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-HTML-%E4%B8%AD%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6%EF%BC%9F">为什么在 HTML 中监听事件？</a></h3><p>你可能注意到这种事件监听的方式违背了关注点分离 (separation of concern) 这个长期以来的优良传统。但不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 <code>v-on</code> 有几个好处：</p><ol><li>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</li><li>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</li><li>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。</li></ol><h2 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h2><p>用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p><p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li><li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li><li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li></ul><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p><strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 Vue 没有这条规则，点击一个按钮就可能会像如下代码一样影响到<em>其它所有实例</em></p><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h2 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h2><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h2 id="动态组件、异步组件"><a href="#动态组件、异步组件" class="headerlink" title="动态组件、异步组件"></a>动态组件、异步组件</h2><h2 id="边界情况"><a href="#边界情况" class="headerlink" title="边界情况"></a>边界情况</h2><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue.js&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/&quot;&gt;vue官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vue是一</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>0131Study</title>
    <link href="http://example.com/2021/02/02/0131Study/"/>
    <id>http://example.com/2021/02/02/0131Study/</id>
    <published>2021-02-02T08:19:29.000Z</published>
    <updated>2021-02-08T04:44:20.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网是如何工作的"><a href="#互联网是如何工作的" class="headerlink" title="互联网是如何工作的"></a>互联网是如何工作的</h1><p>电脑之间需要通信，就需要进行连接。在有多个电脑时，电脑会先与路由器进行连接，将数据传输到路由器，路由器再分配数据到另一台电脑。</p><p>路由器之间也可以互相连接。</p><p>为了连接电话这种网络我们需要一种基础设备叫做调制解调器（modem），调制解调器可以把网络信息变成电话设施可以处理的信息，反之亦然。</p><p>把我们的网络连接到互联网服务提供商（ISP）。ISP是一家可以管理一些特殊的路由器的公司，这些路由器连接其他ISP的路由器. 你的网络消息可以被ISP捕获并发送到相应的网络。互联网就是由这些所有的网络设施所组成。</p><p>通过IP地址寻找到目标网络。</p><h1 id="浏览器的工作原理"><a href="#浏览器的工作原理" class="headerlink" title="浏览器的工作原理"></a>浏览器的工作原理</h1><p><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browsers_we_will_talk_about">浏览器的工作原理</a></p><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p><strong>编辑器就首推VS Code啦</strong></p><h3 id="1、工作区快捷键"><a href="#1、工作区快捷键" class="headerlink" title="1、工作区快捷键"></a>1、工作区快捷键</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Cmd + Shift + P</strong></td><td><strong>Ctrl + Shift + P</strong>，F1</td><td>显示命令面板</td><td></td></tr><tr><td><strong>Cmd + B</strong></td><td><strong>Ctrl + B</strong></td><td>显示/隐藏侧边栏</td><td>很实用</td></tr><tr><td><code>Cmd + \</code></td><td><code>Ctrl + \</code></td><td><strong>创建多个编辑器</strong></td><td>【重要】抄代码利器</td></tr><tr><td><strong>Cmd + 1、2</strong></td><td><strong>Ctrl + 1、2</strong></td><td>聚焦到第 1、第 2 个编辑器</td><td>同上重要</td></tr><tr><td><strong>cmd +/-</strong></td><td><strong>ctrl +/-</strong></td><td>将工作区放大/缩小（包括代码字体、左侧导航栏）</td><td>在投影仪场景经常用到</td></tr><tr><td>Cmd + J</td><td>Ctrl + J</td><td>显示/隐藏控制台</td><td></td></tr><tr><td><strong>Cmd + Shift + N</strong></td><td><strong>Ctrl + Shift + N</strong></td><td>重新开一个软件的窗口</td><td>很常用</td></tr><tr><td>Cmd + Shift + W</td><td>Ctrl + Shift + W</td><td>关闭软件的当前窗口</td><td></td></tr><tr><td>Cmd + N</td><td>Ctrl + N</td><td>新建文件</td><td></td></tr><tr><td>Cmd + W</td><td>Ctrl + W</td><td>关闭当前文件</td><td></td></tr></tbody></table><h3 id="2、跳转操作"><a href="#2、跳转操作" class="headerlink" title="2、跳转操作"></a>2、跳转操作</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>Cmd + `</td><td>没有</td><td>在同一个软件的<strong>多个工作区</strong>之间切换</td><td>使用很频繁</td></tr><tr><td><strong>Cmd + Option + 左右方向键</strong></td><td>Ctrl + Pagedown/Pageup</td><td>在已经打开的<strong>多个文件</strong>之间进行切换</td><td>非常实用</td></tr><tr><td>Ctrl + Tab</td><td>Ctrl + Tab</td><td>在已经打开的多个文件之间进行跳转</td><td>不如上面的快捷键快</td></tr><tr><td>Cmd + Shift + O</td><td>Ctrl + shift + O</td><td>在当前文件的各种<strong>方法之间</strong>进行跳转</td><td></td></tr><tr><td>Ctrl + G</td><td>Ctrl + G</td><td>跳转到指定行</td><td></td></tr><tr><td><code>Cmd+Shift+\</code></td><td><code>Ctrl+Shift+\</code></td><td>跳转到匹配的括号</td><td></td></tr></tbody></table><h3 id="3、移动光标"><a href="#3、移动光标" class="headerlink" title="3、移动光标"></a>3、移动光标</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>方向键</td><td>方向键</td><td>在<strong>单个字符</strong>之间移动光标</td><td>大家都知道</td></tr><tr><td><strong>option + 左右方向键</strong></td><td><strong>Ctrl + 左右方向键</strong></td><td>在<strong>单词</strong>之间移动光标</td><td>很常用</td></tr><tr><td><strong>Cmd + 左右方向键</strong></td><td><strong>Fn + 左右方向键</strong></td><td>在<strong>整行</strong>之间移动光标</td><td>很常用</td></tr><tr><td>Cmd + ←</td><td>Fn + ←（或 Win + ←）</td><td>将光标定位到当前行的最左侧</td><td>很常用</td></tr><tr><td>Cmd + →</td><td>Fn + →（或 Win + →）</td><td>将光标定位到当前行的最右侧</td><td>很常用</td></tr><tr><td>Cmd + ↑</td><td>Ctrl + Home</td><td>将光标定位到文章的第一行</td><td></td></tr><tr><td>Cmd + ↓</td><td>Ctrl + End</td><td>将光标定位到文章的最后一行</td><td></td></tr><tr><td>Cmd + Shift + \</td><td></td><td>在<strong>代码块</strong>之间移动光标</td><td></td></tr></tbody></table><h3 id="4、编辑操作"><a href="#4、编辑操作" class="headerlink" title="4、编辑操作"></a>4、编辑操作</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Cmd + Enter</strong></td><td><strong>Ctrl + Enter</strong></td><td>在当前行的下方新增一行，然后跳至该行</td><td>即使光标不在行尾，也能快速向下插入一行</td></tr><tr><td>Cmd+Shift+Enter</td><td>Ctrl+Shift+Enter</td><td>在当前行的上方新增一行，然后跳至该行</td><td>即使光标不在行尾，也能快速向上插入一行</td></tr><tr><td><strong>Option + ↑</strong></td><td><strong>Alt + ↑</strong></td><td>将代码向上移动</td><td>很常用</td></tr><tr><td><strong>Option + ↓</strong></td><td><strong>Alt + ↓</strong></td><td>将代码向下移动</td><td>很常用</td></tr><tr><td>Option + Shift + ↑</td><td>Alt + Shift + ↑</td><td>将代码向上复制</td><td></td></tr><tr><td><strong>Option + Shift + ↓</strong></td><td><strong>Alt + Shift + ↓</strong></td><td>将代码向下复制</td><td>写重复代码的利器</td></tr></tbody></table><h3 id="5、多光标编辑"><a href="#5、多光标编辑" class="headerlink" title="5、多光标编辑"></a>5、多光标编辑</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Cmd + Option + 上下键</strong></td><td><strong>Ctrl + Alt + 上下键</strong></td><td>在连续的多列上，同时出现光标</td><td></td></tr><tr><td><strong>Option + 鼠标点击任意位置</strong></td><td><strong>Alt + 鼠标点击任意位置</strong></td><td>在任意位置，同时出现光标</td><td></td></tr><tr><td>Option + Shift + 鼠标拖动</td><td>Alt + Shift + 鼠标拖动</td><td>在选中区域的每一行末尾，出现光标</td><td></td></tr><tr><td>Cmd + Shift + L</td><td>Ctrl + Shift + L</td><td>在选中文本的所有相同内容处，出现光标</td><td></td></tr></tbody></table><p>其他的多光标编辑操作：（很重要）</p><ul><li>选中某个文本，然后反复按住快捷键「 <strong>Cmd + D</strong> 」键（windows 用户是按住「<strong>Ctrl + D</strong>」键）， 即可将全文中相同的词逐一加入选择。</li><li>选中一堆文本后，按住「<strong>Option + Shift + i</strong>」键（windows 用户是按住「<strong>Alt + Shift + I</strong>」键），既可在<strong>每一行的末尾</strong>都创建一个光标。</li></ul><h3 id="6、删除操作"><a href="#6、删除操作" class="headerlink" title="6、删除操作"></a>6、删除操作</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>Cmd + shift + K</td><td>Ctrl + Shift + K</td><td>删除整行</td><td>「Cmd + X」的作用是剪切，但也可以删除整行</td></tr><tr><td><strong>option + Backspace</strong></td><td><strong>Ctrl + Backspace</strong></td><td>删除光标之前的一个单词</td><td>英文有效，很常用</td></tr><tr><td>option + delete</td><td>Ctrl + delete</td><td>删除光标之后的一个单词</td><td></td></tr><tr><td><strong>Cmd + Backspace</strong></td><td></td><td>删除光标之前的整行内容</td><td>很常用</td></tr><tr><td>Cmd + delete</td><td></td><td>删除光标之后的整行内容</td><td></td></tr></tbody></table><p>备注：上面所讲到的移动光标、编辑操作、删除操作的快捷键，在其他编辑器里，大部分都适用。</p><h3 id="7、编程语言相关"><a href="#7、编程语言相关" class="headerlink" title="7、编程语言相关"></a>7、编程语言相关</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>Cmd + /</td><td>Ctrl + /</td><td>添加单行注释</td><td>很常用</td></tr><tr><td><strong>Option + Shift + F</strong></td><td>Alt + shift + F</td><td>代码格式化</td><td>很常用</td></tr><tr><td>F2</td><td>F2</td><td>以重构的方式进行<strong>重命名</strong></td><td>改代码备</td></tr><tr><td>Ctrl + J</td><td></td><td>将多行代码合并为一行</td><td>Win 用户可在命令面板搜索”合并行“</td></tr><tr><td>Cmd +</td><td></td><td></td><td></td></tr><tr><td>Cmd + U</td><td>Ctrl + U</td><td>将光标的移动回退到上一个位置</td><td>撤销光标的移动和选择</td></tr></tbody></table><h3 id="8、搜索相关"><a href="#8、搜索相关" class="headerlink" title="8、搜索相关"></a>8、搜索相关</h3><table><thead><tr><th>Mac 快捷键</th><th>Win 快捷键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><strong>Cmd + Shift + F</strong></td><td><strong>Ctrl + Shift +F</strong></td><td>全局搜索代码</td><td>很常用</td></tr><tr><td><strong>Cmd + P</strong></td><td><strong>Ctrl + P</strong></td><td>在当前的项目工程里，<strong>全局</strong>搜索文件名</td><td></td></tr><tr><td>Cmd + F</td><td>Ctrl + F</td><td>在当前文件中搜索代码，光标在搜索框里</td><td></td></tr><tr><td><strong>Cmd + G</strong></td><td><strong>F3</strong></td><td>在当前文件中搜索代码，光标仍停留在编辑器里</td><td>很巧妙</td></tr></tbody></table><ul><li>快捷键速查表[官方]：<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></li></ul><p><a href="https://github.com/qianguyihao/Web/blob/master/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-VS%20Code%E7%9A%84%E4%BD%BF%E7%94%A8.md">VS Code的使用</a></p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p><a href="https://es6.ruanyifeng.com/">ES6教程-阮一峰</a></p><p><a href="https://zh.javascript.info/">现代 JavaScript 教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;互联网是如何工作的&quot;&gt;&lt;a href=&quot;#互联网是如何工作的&quot; class=&quot;headerlink&quot; title=&quot;互联网是如何工作的&quot;&gt;&lt;/a&gt;互联网是如何工作的&lt;/h1&gt;&lt;p&gt;电脑之间需要通信，就需要进行连接。在有多个电脑时，电脑会先与路由器进行连接，将数据传</summary>
      
    
    
    
    <category term="学习日记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="Diary" scheme="http://example.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>GitStudy</title>
    <link href="http://example.com/2021/02/02/GitStudy/"/>
    <id>http://example.com/2021/02/02/GitStudy/</id>
    <published>2021-02-02T08:16:08.000Z</published>
    <updated>2021-02-08T04:44:06.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git的常用命令"><a href="#Git的常用命令" class="headerlink" title="Git的常用命令"></a>Git的常用命令</h1><p>初始化配置用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p><code>git init</code>命令把目录变成Git可以管理的仓库</p><ol><li><code>git add &lt;文件名&gt;</code>将文件添加到仓库</li><li><code>git commit</code>提交  ：<code>git commit -m &quot;xxx&quot;</code></li></ol><p><code>git status</code> 查看仓库当前状态</p><p><code>git diff</code>  查看具体修改</p><p><code>git log</code>命令查看修改历史</p><p><code>git reset --hard HEAD^</code>回退到上一个版本</p><p><code>git reset --hard commit_id</code></p><p><code>git reflog</code> 查看历史所有命令</p><p><code>git checkout -- file</code>可以丢弃工作区的修改</p><p><code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（只是add，没有commit）</p><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><p><code>git remote add origin git@github.com:&lt;username&gt;/&lt;仓库名&gt;.git</code> 本地仓库与远程仓库连接</p><p><code>git push -u origin master</code> 第一次推送本地仓库内容到远程仓库</p><p><code>git push origin master</code> 推送本地仓库内容到远程仓库</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><p><code>git tag &lt;name&gt;</code>就可以打一个新标签</p><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li></ul><ul><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git的常用命令&quot;&gt;&lt;a href=&quot;#Git的常用命令&quot; class=&quot;headerlink&quot; title=&quot;Git的常用命令&quot;&gt;&lt;/a&gt;Git的常用命令&lt;/h1&gt;&lt;p&gt;初始化配置用户名和邮箱&lt;/p&gt;
&lt;figure class=&quot;highlight plain</summary>
      
    
    
    
    <category term="Git" scheme="http://example.com/categories/Git/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>hexoNote</title>
    <link href="http://example.com/2021/02/02/hexoNote/"/>
    <id>http://example.com/2021/02/02/hexoNote/</id>
    <published>2021-02-02T07:45:00.000Z</published>
    <updated>2021-02-08T04:44:13.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo快捷命令"><a href="#hexo快捷命令" class="headerlink" title="hexo快捷命令"></a>hexo快捷命令</h1><p><code> hexo new 文章名</code>创建新文章<br><code>hexo clean </code>清除缓存<br><code>hexo g</code>重新配置<br><code>hexo s</code>在本地运行，查看blog<br><code>hexo d</code>将博客推送到远程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo快捷命令&quot;&gt;&lt;a href=&quot;#hexo快捷命令&quot; class=&quot;headerlink&quot; title=&quot;hexo快捷命令&quot;&gt;&lt;/a&gt;hexo快捷命令&lt;/h1&gt;&lt;p&gt;&lt;code&gt; hexo new 文章名&lt;/code&gt;创建新文章&lt;br&gt;&lt;code&gt;hexo </summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="blog" scheme="http://example.com/tags/blog/"/>
    
  </entry>
  
</feed>
